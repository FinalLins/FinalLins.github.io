<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础-数据类型和运算符</title>
      <link href="/2016/08/09/java-ji-chu-shu-ju-lei-xing-he-yun-suan-fu/"/>
      <url>/2016/08/09/java-ji-chu-shu-ju-lei-xing-he-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份毒鸡汤，希望您每天都开开心心。</p><blockquote><p>爱笑的人运气不会太差。说实话，如果一个人运不好，我不知道他怎么笑得出来。</p></blockquote><p>😁</p></blockquote><h2 id="1-分隔符"><a href="#1-分隔符" class="headerlink" title="1.分隔符"></a>1.分隔符</h2><p>&emsp;&emsp;<code>Java</code>语言也和其他编程语言一样，使用标识符作为变量、对象的名字，也提供了系列的关键字用以实现特别的功能。</p><h3 id="1-1分号"><a href="#1-1分号" class="headerlink" title="1.1分号"></a>1.1分号</h3><p>&emsp;&emsp;<code>Java</code>语言采用分号<code>;</code>作为语句的分割，因此每个<code>Java</code>语句必须使用分号结尾。</p><pre class=" language-java"><code class="language-java">String name1 <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须使用;作为每一个语句的结束</span>String name2 <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span></code></pre><h3 id="1-2花括号"><a href="#1-2花括号" class="headerlink" title="1.2花括号"></a>1.2花括号</h3><p>&emsp;&emsp;花括号<code>{}</code>的作用就是定义一个代码块，<code>{}</code>必须是成双成对。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法块</span><span class="token punctuation">}</span></code></pre><h3 id="1-3方括号"><a href="#1-3方括号" class="headerlink" title="1.3方括号"></a>1.3方括号</h3><p>&emsp;&emsp;方括号<code>[]</code>的作用是用于访问数组元素，方括号通常紧跟数组变量名，而方括号里面放的是需要访问的数组元素的索引。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-4圆括号"><a href="#1-4圆括号" class="headerlink" title="1.4圆括号"></a>1.4圆括号</h3><ul><li>定义方法是用来包裹形参，调用方法是也是用来包裹传入的实参。</li><li>还可以用来强调一个整体，保证计算的优先级。</li><li>强制类型转换也需要用圆括号来包裹。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法块</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包裹入参的值 &amp; 强制转换类型</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算的顺序</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//包裹形参</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-5空格"><a href="#1-5空格" class="headerlink" title="1.5空格"></a>1.5空格</h3><p>&emsp;&emsp;<code>Java</code>语言使用空格分隔一条语句的不同部分。也可以用来合理缩进美化代码。</p><h3 id="1-6圆点"><a href="#1-6圆点" class="headerlink" title="1.6圆点"></a>1.6圆点</h3><p>&emsp;&emsp;通常用作类/对象和它的成员（包括成员变量、方法和内部类）之间的分隔符，表明调用某个类或者某个实例的指定成员。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类的变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例的公开变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getValue3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例的方法</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等等    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h2><p>&emsp;&emsp;标识符就是用于给程序中的变量、类、方法命名的符号。规则如下：</p><ul><li>可以由字母、数字、下划线和美元符组成，不能使用数字开头</li><li>不能使用<a href="#java关键字">java关键字</a>，但是可以包含。</li><li>不能包含空格。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> methodCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span><span class="token keyword">int</span> method_count$<span class="token number">3</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span><span class="token keyword">int</span> 4method_count$ <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，不能使用数字开头</span>String <span class="token keyword">int</span> <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，不能使用java关键字</span>String intStr <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span>String <span class="token keyword">int</span> strt <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，不能包含空格</span></code></pre><h2 id="3-java关键字（53个）"><a href="#3-java关键字（53个）" class="headerlink" title="3.java关键字（53个）"></a>3.java关键字（53个）</h2><p>&emsp;&emsp;<code>Java</code>语言中有一些具有特殊用途的单词被称为关键字（keywards）。其中有部分关键字是现在还未使用，但可能未来的<code>Java</code>版本中会使用，我们称之为保留字（reserved words）。</p><h3 id="3-1-问修饰符的关键字（3个）"><a href="#3-1-问修饰符的关键字（3个）" class="headerlink" title="3.1 问修饰符的关键字（3个）"></a>3.1 问修饰符的关键字（3个）</h3><p>用来修饰类、方法、变量。</p><table><thead><tr><th>&emsp;</th><th>类</th><th>本包</th><th>子类</th><th>外部包</th></tr></thead><tbody><tr><td>public</td><td>$\surd$</td><td>$\surd$</td><td>$\surd$</td><td>$\surd$</td></tr><tr><td>protected</td><td>$\surd$</td><td>$\surd$</td><td>$\surd$</td><td>$\times$</td></tr><tr><td>(默认)</td><td>$\surd$</td><td>$\surd$</td><td>$\times$</td><td>$\times$</td></tr><tr><td>private</td><td>$\surd$</td><td>$\times$</td><td>$\times$</td><td>$\times$</td></tr></tbody></table><h3 id="3-2-定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）"><a href="#3-2-定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）" class="headerlink" title="3.2 定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）"></a>3.2 定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义类</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义抽象类</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现接口</span><span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承类</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化对象</span></code></pre><h3 id="3-3-包的关键字（2个）"><a href="#3-3-包的关键字（2个）" class="headerlink" title="3.3 包的关键字（2个）"></a>3.3 包的关键字（2个）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义包的关键字</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>test2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入包的关键字</span></code></pre><h3 id="3-4-数据类型的关键字（10个）"><a href="#3-4-数据类型的关键字（10个）" class="headerlink" title="3.4 数据类型的关键字（10个）"></a>3.4 数据类型的关键字（10个）</h3><p>&emsp;&emsp;数据类型包含基本类型、枚举和空<code>void</code></p><h4 id="3-4-1-基本类型"><a href="#3-4-1-基本类型" class="headerlink" title="3.4.1 基本类型"></a>3.4.1 基本类型</h4><table><thead><tr><th>关键字</th><th>中文解释</th><th>位数</th><th>位数说明</th><th>取值范围</th><th>包装类型</th></tr></thead><tbody><tr><td>boolean</td><td>布尔</td><td></td><td></td><td></td><td>Boolean</td></tr><tr><td>byte</td><td>字节型</td><td>8bit</td><td>[符号位1bit][尾数7bit]</td><td>$-2^7\sim2^7-1$</td><td>Byte</td></tr><tr><td>char</td><td>字符型</td><td>16bit</td><td>无符号</td><td></td><td>Character</td></tr><tr><td>short</td><td>短整形</td><td>16bit</td><td>[符号位1bit][尾数15bit]</td><td>$-2^{15}\sim2^{15}-1$</td><td>Short</td></tr><tr><td>int</td><td>整形</td><td>32bit</td><td>[符号位1bit][尾数31bit]</td><td>$-2^{31}\sim2^{31}-1$</td><td>Integer</td></tr><tr><td>long</td><td>长整形</td><td>64bit</td><td>[符号位1bit][尾数63bit]</td><td>$-2^{63}\sim2^{63}-1$</td><td>Long</td></tr><tr><td>float</td><td>浮点型（单精度，精度是6位有效数字）</td><td>32bit</td><td>[符号位1bit][指数8bit][尾数23bit]</td><td>$2^{-149}\sim2^{128}-1$</td><td>Float</td></tr><tr><td>double</td><td>双精度（精度是15位有效数字）</td><td>64bit</td><td>[符号位1bit][指数11bit][尾数52bit]</td><td>$2^{-1074}\sim2^{1024}-1$</td><td>Double</td></tr></tbody></table><blockquote><p>关于boolean类型占多少个字节，官方给出的说明是其大小不是精确定义的[This data type represents one bit of information, but its “size” isn’t something that’s precisely defined.]<br><a href="https://blog.csdn.net/xiaheshun/article/details/79634232" target="_blank" rel="noopener">验证 boolean 所占的字节大小。</a></p></blockquote><h4 id="3-4-2-枚举enum"><a href="#3-4-2-枚举enum" class="headerlink" title="3.4.2 枚举enum"></a>3.4.2 枚举enum</h4><p>&emsp;&emsp;<code>enum</code> 枚举类型，可以将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件使用。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//枚举</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Sex <span class="token punctuation">{</span>    male<span class="token punctuation">,</span> female<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-3-void空类型"><a href="#3-4-3-void空类型" class="headerlink" title="3.4.3 void空类型"></a>3.4.3 void空类型</h4><p>&emsp;&emsp;<code>void</code>表示空类型， <code>void</code> 可以用作方法的返回类型，以指示该方法不返回值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无返回值</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-条件循环（12个）"><a href="#3-5-条件循环（12个）" class="headerlink" title="3.5 条件循环（12个）"></a>3.5 条件循环（12个）</h3><h4 id="3-5-1-if-else"><a href="#3-5-1-if-else" class="headerlink" title="3.5.1 if else"></a>3.5.1 if else</h4><p>&emsp;&emsp;<code>if</code> 就是如果的意思，单独使用就是对括号 <code>()</code> 里面的条件进行判断，满足就执行 <code>{}</code> 里面的代码块。也可以搭配 <code>else</code> 使用，假如不满足 <code>if</code>的条件就执行 <code>else</code> 里面的代码块。多条件的话还可以搭配 <code>else if</code> 进行逻辑判断。不啰嗦太多，直接上代码比较直观一点：</p><blockquote><p>条件计算的结果为布尔值哦。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单一条件判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果condition为true就会进入代码块执行下面代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//互斥的两种情况判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果condition为true就会进入代码块执行下面代码，否则执行else里面的代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多条件判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-2-do-while"><a href="#3-5-2-do-while" class="headerlink" title="3.5.2 do while"></a>3.5.2 do while</h4><p>&emsp;&emsp;<code>do</code> 一般搭配 <code>while</code> 使用，在判断 <code>while</code>的condition之前一定会执行一次。<br><code>while</code>也可以单独使用，用来循环指定的逻辑。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//condition为ture，一直循环执行代码块</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无论condition是否为true一定会先执行一次。</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-5-3-for-break-continue"><a href="#3-5-3-for-break-continue" class="headerlink" title="3.5.3 for break continue"></a>3.5.3 for break continue</h4><p>&emsp;&emsp; <code>for</code> 也可以用来作为循环的语句。它跟 <code>while</code> 在写法上有点区别，for 语句的形式为 <code>for(initialize; condition; increment)</code> 控件流进入 <code>for</code> 语句时，将执行一次 <code>initialize</code> 语句。每次执行循环体之前将计算 <code>condition</code> 的结果。如果 <code>condition</code> 为 <code>true</code>，则执行循环体。 每次执行循环体之后，在计算下一个迭代的 <code>condition</code> 之前，将执行 <code>increment</code> 语句。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：<span class="token number">1</span><span class="token number">3</span><span class="token number">5</span></code></pre><p>&emsp;&emsp;有些同学就会问了，那我的 <code>condition</code> 如果一直为 <code>true</code> ，或者说我不想等到所有情况都执行一次中途退出循环该怎么办？这就可以使用我们的关键字 <code>break</code> ，包括在<a href="#">3.5.2</a>中的<code>while</code>循环也是可以使用 <code>break</code> 跳出本次循环。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：<span class="token number">1</span></code></pre><p>&emsp;&emsp;<code>continue</code> 用来当我满足某个条件后，我不想再执行下面的代码块，而直接进入下一次循环。在 <code>while</code> 循环也是可以使用哦。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：<span class="token number">1</span><span class="token number">5</span></code></pre><h4 id="3-5-4-return-instanceof"><a href="#3-5-4-return-instanceof" class="headerlink" title="3.5.4 return instanceof"></a>3.5.4 return instanceof</h4><ul><li><code>return</code> 会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。如果方法具有非 <code>void</code> 的返回类型，<code>return</code> 语句必须具有相同或兼容类型的参数。 返回值两侧的括号是可选的。</li><li><code>instanceof</code> 用来确定对象所属的类。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isString</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//o 不为空 并且 左边的对象是右边对象的实例</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-5-switch-case-default"><a href="#3-5-5-switch-case-default" class="headerlink" title="3.5.5 switch case default"></a>3.5.5 switch case default</h4><p>&emsp;&emsp; <code>switch case</code>也是用来条件判断的语句。<code>case</code>作为<code>switch</code>的条件分支，一般以 <code>break</code> 或者 <code>retrurn</code> 用于退出 switch 语句，如果没有结束语句，则执行流将进入所有后面的 <code>case</code> 和/或 <code>default</code> 块。</p><blockquote><p><code>swtich</code> 中的 <code>condition</code> 必须是 <code>byte、char、short or int</code>类型</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> color<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            color <span class="token operator">=</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            color <span class="token operator">=</span> Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//当index不满足任何一个case的情况下就会执行default</span>            color <span class="token operator">=</span> Color<span class="token punctuation">.</span>RED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-6-修饰方法，类，属性和变量（9个）"><a href="#3-6-修饰方法，类，属性和变量（9个）" class="headerlink" title="3.6 修饰方法，类，属性和变量（9个）"></a>3.6 修饰方法，类，属性和变量（9个）</h3><ul><li><code>static</code> 属性和方法都可以用 <code>static</code> 修饰，直接使用类名.属性和方法名。 只有内部类可以使用 <code>static</code> 关键字修饰，调用直接使用类名.内部类类名进行调用。 <code>static</code> 可以独立存在静态块。</li><li><code>final</code> 方法和类都可以用 <code>final</code> 来修饰 <code>final</code> 修饰的类是不能被继承的 修饰的方法是不能被子类重写。常量的定义： <code>final</code> 修饰的属性就是常量。</li><li><code>super</code> 用来调用父类的方法。</li><li><code>this</code> 用于引用当前实例。当引用可能不明确时，可以使用 <code>this</code> 关键字来引用当前的实例。</li><li><code>native</code> 以指示该方法是用 <code>Java</code> 以外的语言实现的。 <code>Java</code> 的不足除了体现在运行速度上要比传统的 <code>C++</code> 慢许多之外， <code>Java</code> 无法直接访问到操作系统底层（如系统硬件等)，为此 <code>Java</code> 使用native方法来扩展 <code>Java</code> 程序的功能。</li><li><code>strictfp</code> 的意思是<code>FP-strict</code>，也就是说精确浮点的意思。在<code>Java</code>虚拟机进行浮点运算时，如果没有指定 <code>strictfp</code> 关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了 <code>strictfp</code> 来声明一个类、接口或者方法时，那么所声明的范围内 <code>Java</code> 的编译器以及运行环境会完全依照浮点规范 <code>IEEE-754</code> 来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字 <code>strictfp</code> 。可以将一个类、接口以及方法声明为 <code>strictfp</code> ，但是不允许对接口中的方法以及构造函数声明 <code>strictfp</code> 关键字。</li><li><code>synchronized</code> 可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 可防止代码的关键代码段一次被多个线程执行。 </li><li><code>transient</code> 可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。</li><li><code>volatile</code> 用于表示可以被多个线程异步修改的成员变量。 注意： <code>volatile</code> 关键字在许多 <code>Java</code> 虚拟机中都没有实现。 <code>volatile</code> 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//volatile具有synchronized关键字的“可见性”，但是没有synchronized关键字的“并发正确性”，也就是说不保证线程执行的有序性。</span>                                      <span class="token comment" spellcheck="true">//也就是说，volatile变量对于每次使用，线程都能得到当前volatile变量的最新值。但是volatile变量并不保证并发的正确性。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代表常量</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//A不能被继承</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span><span class="token function">loadlibrary</span><span class="token punctuation">(</span><span class="token string">"lib-gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修饰的成员变量不被序列化</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>String params<span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用父类方法</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法块加上同步锁，线程安全</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">showGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本地静态方法</span><span class="token punctuation">}</span></code></pre><h3 id="3-7-错误处理（5个）"><a href="#3-7-错误处理（5个）" class="headerlink" title="3.7 错误处理（5个）"></a>3.7 错误处理（5个）</h3><ul><li><code>try</code> 捕捉异常</li><li><code>catch</code> 处理异常</li><li><code>finally</code> 有无异常都执行</li><li><code>throw</code> 抛出一个异常</li><li><code>throws</code> 声明一个异常可能被抛出，把异常交给他的上级管理，自己不进行异常处理</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>“error”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-8-直接量（literal）（3个）"><a href="#3-8-直接量（literal）（3个）" class="headerlink" title="3.8 直接量（literal）（3个）"></a>3.8 直接量（literal）（3个）</h3><ol><li><code>null</code> 表示无值，空值。将 <code>null</code> 赋给非原始变量相当于释放该变量先前所引用的对象。不能将 <code>null</code> 赋给基本类型。</li><li><code>true</code>表示 <code>boolean</code> 变量的两个合法值中的一个，真。</li><li><code>false</code>表示 <code>boolean</code> 变量的两个合法值中的一个，假。</li></ol><h3 id="3-9-断言（1个）"><a href="#3-9-断言（1个）" class="headerlink" title="3.9 断言（1个）"></a>3.9 断言（1个）</h3><p>&emsp;&emsp; <code>assert</code>如果为 <code>true</code> ，则程序继续执行，如果为 <code>false</code> ，则程序抛出 <code>AssertionError</code> 并终止运行</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span> s <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//断言</span></code></pre><h3 id="3-10-保留字（2个）"><a href="#3-10-保留字（2个）" class="headerlink" title="3.10 保留字（2个）"></a>3.10 保留字（2个）</h3><p>&emsp;&emsp; <code>goto</code>和<code>const</code></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2016/08/01/hello-world/"/>
      <url>/2016/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
