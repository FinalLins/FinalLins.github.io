<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java基础-数据结构-堆(Heap)</title>
      <link href="/2017/08/28/java-ji-chu-shu-ju-jie-gou-dui-heap/"/>
      <url>/2017/08/28/java-ji-chu-shu-ju-jie-gou-dui-heap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好久没喝毒鸡汤了，来一碗。<br>如果上天没有给你想要的，不是你值得拥有更好的，而是你不配。别以为今天是你人生的低谷，在你未来的日子里它都能算得上是巅峰了。</p></blockquote><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>&emsp;&emsp;前段时间我们学习了<a href="/2017/08/22/java-ji-chu-dui-pai-xu/">堆排序</a>，那么我们今天就来彻底的学习<code>堆</code>这个数据结构。<code>数据结构堆</code>跟<code>堆内存</code>是不一样的。数据结构堆本质其实一种<code>完全二叉树</code>。（树的知识点这里就跳过了，不了解的同学可以先去看看）。</p><ul><li>堆是一个近似<code>完全二叉树</code>的结构：除了最后一层节点可以不是满的，其他的节点从左到右都是满的。</li><li>堆满足<code>堆积的性质</code>：即子结点的键值总是小于等于（或者大于等于）它的父节点。</li></ul><!-- 如果对树不了解的同学，可以学习下。[传送门](https://blog.csdn.net/qq_22642239/article/details/80774013) --><blockquote><p>结合二叉树的性质计算出索引关系，父结点 <code>(i - 1) / 2</code> ，左子结点 <code>2 * i + 1</code> ，右子结点 <code>2 * i + 2</code>。<br>最大堆：结点的值大于等于子结点得值，<code>key[i] &gt;= key[2 * i + 1]</code> 并且 <code>key[i] &gt;= key[2 * i + 2]</code>。<br>最小堆：结点的值小于等于子结点的值，<code>key[i] &lt;= key[2 * i + 1]</code> 并且 <code>key[i] &lt;= key[2 * i + 2]</code>。</p></blockquote><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyHeap</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 节点数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前大小     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 插入一个元素     *     * @param element     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">// 存储已满</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 将新节点放到数组最后</span>        <span class="token function">adjustUp</span><span class="token punctuation">(</span>size<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// 调整堆结构</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向上调整     * 1. 将待插入元素放到数组最后；     * 2. 令当前节点为插入元素所在节点；     * 3. 当前节点与父节点比较大小，如果父节点的关键字小于当前节点，则与父节点交换；否则，表示调整结构结束，退出；     * 4. 如果没有退出，对交换后的当前节点重复上一步过程。     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> parent <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//父节点的索引</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将新加的尾节点存在last中</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span> <span class="token operator">&lt;</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span>            array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>parent<span class="token punctuation">]</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> parent<span class="token punctuation">;</span>            parent <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 堆中删除元素，总是删除堆顶元素     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"堆为空，不能进行删除操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//最后一个元素放到堆顶</span>        <span class="token function">adjustDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向下调整     * 1. 删除堆顶元素，并将最后一个元素放到堆顶；     * 2. 设当前节点为堆顶节点；     * 3. 找到当前节点的子节点中关键字最大的那个节点，然后将此子节点与当前节点比较大小，如果此节点关键字大于当前节点，则交换两个节点；否则，表示调整结构结束，退出；     * 4. 如果没有退出，对交换后的当前节点重复上一步过程。     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> maxChild<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//后面没有子节点了就结束循环</span>            left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//2 * index + 2;</span>            <span class="token comment" spellcheck="true">// maxChild = index;</span>            <span class="token comment" spellcheck="true">// if (left &lt; size &amp;&amp; array[left] > array[maxChild]) {</span>            <span class="token comment" spellcheck="true">//     maxChild = left;</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">// if (right &lt; size &amp;&amp; array[right] > array[maxChild]) {</span>            <span class="token comment" spellcheck="true">//     maxChild = right;</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">// if (maxChild == index) {</span>            <span class="token comment" spellcheck="true">//     break;</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">// 判断右边的子节点是否存在并且右边子节点大于左边子节点，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxChild <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                maxChild <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">>=</span> array<span class="token punctuation">[</span>maxChild<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//结点比子结点值都大，退出循环</span>            <span class="token punctuation">}</span>            array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>maxChild<span class="token punctuation">]</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> maxChild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">modifyByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> newElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> oldElement <span class="token operator">=</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldElement <span class="token operator">&lt;</span> newElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjustUp</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldElement <span class="token operator">></span> newElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjustDown</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-图解"><a href="#3-图解" class="headerlink" title="3. 图解"></a>3. 图解</h3><p>代码实现很简单，我们来测试下：</p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyHeap myHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyHeap</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            myHeap<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        myHeap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myHeap<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p></p><blockquote><p>输出如下：<br>[ 5 ]<br>[ 8, 5 ]<br>[ 8, 5, 0 ]<br>[ 9, 8, 0, 5 ]<br>[ 9, 8, 0, 5, 3 ]<br>[ 8, 5, 0, 3 ]</p></blockquote><p><strong>暂时没图，将就先看把，哈哈，以后补上</strong></p><h3 id="3-1-添加元素："><a href="#3-1-添加元素：" class="headerlink" title="3.1 添加元素："></a>3.1 添加元素：</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>        <span class="token number">5</span><span class="token number">2</span><span class="token punctuation">.</span>        <span class="token number">5</span>                         <span class="token number">8</span>         <span class="token operator">/</span>      向上调整堆<span class="token operator">=</span><span class="token operator">></span>         <span class="token operator">/</span>        <span class="token number">8</span>                         <span class="token number">5</span><span class="token number">3</span><span class="token punctuation">.</span>        <span class="token number">8</span>         <span class="token operator">/</span> \        <span class="token number">5</span>   <span class="token number">0</span><span class="token number">4</span><span class="token punctuation">.</span>        <span class="token number">8</span>                     <span class="token number">8</span>               <span class="token number">9</span>         <span class="token operator">/</span> \                   <span class="token operator">/</span> \             <span class="token operator">/</span> \        <span class="token number">5</span>   <span class="token number">0</span>   向上调整堆<span class="token operator">=</span><span class="token operator">></span>    <span class="token number">9</span>  <span class="token number">0</span>    <span class="token operator">=</span><span class="token operator">></span>      <span class="token number">8</span>   <span class="token number">0</span>       <span class="token operator">/</span>                     <span class="token operator">/</span>               <span class="token operator">/</span>      <span class="token number">9</span>                     <span class="token number">5</span>               <span class="token number">5</span><span class="token number">5</span><span class="token punctuation">.</span>        <span class="token number">9</span>         <span class="token operator">/</span> \        <span class="token number">8</span>   <span class="token number">0</span>       <span class="token operator">/</span> \      <span class="token number">5</span>   <span class="token number">3</span></code></pre><h3 id="3-2-删除元素"><a href="#3-2-删除元素" class="headerlink" title="3.2 删除元素"></a>3.2 删除元素</h3><pre class=" language-java"><code class="language-java"> <span class="token number">1</span><span class="token punctuation">.</span>       <span class="token number">9</span>         <span class="token operator">/</span> \        <span class="token number">8</span>   <span class="token number">0</span>         <span class="token operator">/</span> \      <span class="token number">5</span>   <span class="token number">3</span><span class="token number">2</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">//删除堆顶元素</span>                                              <span class="token number">3</span>         <span class="token operator">/</span> \                                 <span class="token operator">/</span> \        <span class="token number">8</span>   <span class="token number">0</span>    把末尾元素放到堆顶 <span class="token operator">=</span><span class="token operator">></span>         <span class="token number">8</span>   <span class="token number">0</span>       <span class="token operator">/</span> \                                 <span class="token operator">/</span>      <span class="token number">5</span>   <span class="token number">3</span>                               <span class="token number">5</span><span class="token number">3</span><span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">//向下调整</span>          <span class="token number">8</span>               <span class="token number">8</span>         <span class="token operator">/</span> \             <span class="token operator">/</span> \        <span class="token number">3</span>   <span class="token number">0</span>  <span class="token operator">=</span><span class="token operator">></span>       <span class="token number">5</span>   <span class="token number">0</span>       <span class="token operator">/</span>               <span class="token operator">/</span>      <span class="token number">5</span>               <span class="token number">3</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-数据结构-数组</title>
      <link href="/2017/08/23/java-ji-chu-shu-ju-jie-gou-shu-zu/"/>
      <url>/2017/08/23/java-ji-chu-shu-ju-jie-gou-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>&emsp;&emsp;在<code>Java</code>中，数组是一种<a href="/2017/08/11/java-ji-chu-shu-ju-lei-xing/">引用类型</a>（不是很清楚的同学可以看看我前面的博客），数组是用来存放同一种数据类型的集合，注意只能存放同一种数据类型（<code>Object</code>类型数组除外）。数组引用变量只是一个引用，数组对象和数组变量是分开存放的。举个例子：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义一个数组</span>    <span class="token comment" spellcheck="true">//声明的变量名就是array，它是存放到栈内存中，它存放到的是右边int[]对象的十六进制的地址</span>    <span class="token comment" spellcheck="true">//右边的int[]数组这个对象，它是存放到堆内存中</span></code></pre><blockquote><p>声明的变量名，也就是等号的左边，在<code>C/C++</code>中貌似叫左值。引用其实就是指针的概念，只是在Java中没有指针而已。<br></p></blockquote><h3 id="2-数组的基本用法"><a href="#2-数组的基本用法" class="headerlink" title="2. 数组的基本用法"></a>2. 数组的基本用法</h3><h4 id="2-1-数组的声明"><a href="#2-1-数组的声明" class="headerlink" title="2.1 数组的声明"></a>2.1 数组的声明</h4><ol><li><p>数据类型[] 数组变量名 = new 数据类型[数组长度]。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个长度为5的数组</span></code></pre></li><li><p>数据类型 数组变量名[] = new 数据类型[数组长度]。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个长度为5的数组</span></code></pre></li><li><p>数据类型[] 数组变量名 = {元素1，元素2，元素3，元素4}。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个长度为5的数组</span></code></pre></li></ol><blockquote><p>第一种和第二种没啥区别，常用的是第一种，第二种方式看起来没那么直观。没仔细看还以为 <code>array[]</code> 是变量名</p></blockquote><h4 id="2-2-数组的使用"><a href="#2-2-数组的使用" class="headerlink" title="2.2 数组的使用"></a>2.2 数组的使用</h4><p>&emsp;&emsp;初始化数组，当我们用关键字<code>new</code>进行操作的时候，就会在堆内存中申请一块内存空间存放该数组的对象，默认会根据数据类型对每个元素进行初始化赋值。</p><table><thead><tr><th>类型</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>基本类型</td><td>0</td></tr><tr><td>short</td><td>基本类型</td><td>0</td></tr><tr><td>char</td><td>基本类型</td><td>‘\0000’(整型值为0)</td></tr><tr><td>int</td><td>基本类型</td><td>0</td></tr><tr><td>long</td><td>基本类型</td><td>0</td></tr><tr><td>float</td><td>基本类型</td><td>0.0F</td></tr><tr><td>double</td><td>基本类型</td><td>0.0D</td></tr><tr><td>boolean</td><td>基本类型</td><td>false</td></tr><tr><td>-</td><td>引用类型</td><td>null</td></tr></tbody></table><p>下来我们直接看代码，进行初始化、访问其中某个元素和赋值等操作：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//定义一个长度为5的数组</span>                                    <span class="token comment" spellcheck="true">//该数组只能存放int类型</span>                                    <span class="token comment" spellcheck="true">//所有元素初始化值就int的默认初始化值0</span>    <span class="token keyword">int</span> element1 <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//访问数组第一个元素</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出值为0，验证了我们上面说过的数组初始化的时候会根据数据类型进行初始化</span>    array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历访问数组</span>    <span class="token comment" spellcheck="true">//数组下标范围 0 ~ (length - 1)</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>当使用 0 ~ (length - 1) 范围外的下标访问数组时，系统就会抛出异常提示开发人员，数组越界咯。</p><blockquote><p><code>java.lang.ArrayIndexOutOfBoundsException</code></p></blockquote></blockquote><h3 id="3-用数组实现对数据的增删改查"><a href="#3-用数组实现对数据的增删改查" class="headerlink" title="3. 用数组实现对数据的增删改查"></a>3. 用数组实现对数据的增删改查</h3><p>&emsp;&emsp;任何一个数据结构的基本功能无非就是增、删、改、查，那么我们使用数组来实现以下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ILLEGAL_INDEX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INIT_VALUE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 定义一个数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 数组容量     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 元素真实个数     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"数组容量必须大于0！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向数组末尾添加一个元素     *     * @param element     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除某个元素     *     * @param element     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> ILLEGAL_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">removeByIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引删除元素     *     * @param index     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> INIT_VALUE<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引获取对应的值     *     * @param index     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"数组越界！"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> oldElement<span class="token punctuation">,</span> <span class="token keyword">int</span> newElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findElement</span><span class="token punctuation">(</span>oldElement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> ILLEGAL_INDEX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newElement<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">modifyByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> newElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newElement<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据元素查找索引位置     *     * @param element     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ILLEGAL_INDEX<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 打印数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        System.out.println(Arrays.toString(array));</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"[ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" ]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码还是蛮简单的，我们来测试下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyArray myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//默认容量20</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        myArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//随机生成数据添加到数据结构中</span>    <span class="token punctuation">}</span>    myArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myArray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myArray<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除某个值 : "</span> <span class="token operator">+</span> myArray<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myArray<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除某个索引对应的值 : "</span> <span class="token operator">+</span> myArray<span class="token punctuation">.</span><span class="token function">removeByIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myArray<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改某个值 : "</span> <span class="token operator">+</span> myArray<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myArray<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改某个索引对应的值 : "</span> <span class="token operator">+</span> myArray<span class="token punctuation">.</span><span class="token function">modifyByIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myArray<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示某个索引对应的值 : "</span> <span class="token operator">+</span> myArray<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出如下：(等号后面的是解释)</p><blockquote><p>[ 92, 0, 4, 80, 12, 200, 201 ] ====&gt; 源数据<br>删除某个值 : true  ============&gt; 删除200这个值<br>[ 92, 0, 4, 80, 12, 201 ]<br>删除某个索引对应的值 : true ====&gt; 删除索引1的值<br>[ 92, 4, 80, 12, 201 ]<br>修改某个值 : true<br>[ 92, 4, 80, 12, 301 ]<br>修改某个索引对应的值 : true<br>[ 92, 302, 80, 12, 301 ]<br>显示某个索引对应的值 : 302</p></blockquote><h3 id="4-特性"><a href="#4-特性" class="headerlink" title="4. 特性"></a>4. 特性</h3><ul><li>末尾插入速度快。（指定位置插入速度依赖于查询和移动元素）</li><li>查询速度慢。</li><li>删除速度慢。</li><li>数组创建后，长度是固定的。扩展性很差。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-堆排序</title>
      <link href="/2017/08/22/java-ji-chu-dui-pai-xu/"/>
      <url>/2017/08/22/java-ji-chu-dui-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>&emsp;&emsp;<strong>堆排序</strong>（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。排序思想：</p><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。</li><li>不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><blockquote><p>总结一句话：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p><p>对<a href="/2017/08/28/java-ji-chu-shu-ju-jie-gou-dui-heap/">数据结构-堆</a>不是很明白的同学，可以去翻翻我的博客。</p></blockquote><h3 id="2-算法分析"><a href="#2-算法分析" class="headerlink" title="2. 算法分析"></a>2. 算法分析</h3><p>&emsp;&emsp;堆排序是一种选择排序，整体主要由构建初始堆+交换堆顶元素和末尾元素并重建堆两部分组成。</p><ul><li>时间复杂度：初始堆经推导复杂度为O(n)，在交换并重建堆的过程中，需交换n-1次，而重建堆的过程中，根据完全二叉树的性质，<code>[log2(n-1),log2(n-2)...1]</code>逐步递减，近似为$nlog_{2}n$。所以堆排序时间复杂度最好和最坏情况下都是$O(nlog_{2}n)$级。</li><li>空间复杂度：堆排序不要任何辅助数组，只需要一个辅助变量，所占空间是常数与n无关，所以空间复杂度为$O(1)$。</li></ul><h3 id="3-稳定性"><a href="#3-稳定性" class="headerlink" title="3. 稳定性"></a>3. 稳定性</h3><p>&emsp;&emsp;每次堆顶都会跟尾部元素交换，破坏了源数据，所以堆排序是一个不稳定排序。</p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Heap</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"堆排序"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> lastIndex <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_parent_node <span class="token operator">=</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算出最后y一个的非叶结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max_parent_node<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG_ENABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"把源数组构建成最大堆："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> leftChild <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightChild <span class="token operator">=</span> leftChild <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftChild <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>leftChild<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxIndex <span class="token operator">=</span> leftChild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rightChild <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>rightChild<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxIndex <span class="token operator">=</span> rightChild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxIndex <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>maxIndex<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxIndex<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> arr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">//构建最大堆（结点的值大于等于子结点），说明堆顶是最大值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> length <span class="token operator">-</span> i<span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//把堆顶数据和i（末尾）交换</span>                <span class="token function">printLoop</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">"跟末尾第"</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"交换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//再次调整堆结构，让他满足堆积的特性</span>                <span class="token function">printLoop</span><span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">"再次调整堆结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>&emsp;&emsp;堆排序适合处理数据量大的情况，数据呈流式输入时用堆排序也很方便。并且对稳定性没有要求。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-快速排序</title>
      <link href="/2017/08/21/java-ji-chu-kuai-su-pai-xu/"/>
      <url>/2017/08/21/java-ji-chu-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份鸡汤。<br>如果你真的愿意去努力，那么你人生最坏的结果，也不过是大器晚成。</p></blockquote><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>&emsp;&emsp;<strong>快速排序</strong>（Quicksort）是对冒泡排序的一种改进。快速排序由C. A. R. Hoare在1960年提出。<br>&emsp;&emsp;通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。快速排序也是用了分治法的思想。<br>&emsp;&emsp;快速排序算法通过多次比较和交换来实现排序，其排序流程如下：</p><ul><li>首先设定一个分界值，通过该分界值将数组分成左右两部分。</li><li>将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。</li><li>然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。</li><li>重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。</li></ul><h3 id="2-算法分析"><a href="#2-算法分析" class="headerlink" title="2. 算法分析"></a>2. 算法分析</h3><p>&emsp;&emsp;快速排序的一次划分算法从两头交替搜索，直到 <code>low</code> 和 <code>high</code> 重合，因此其时间复杂度是$O(n)$；而整个快速排序算法的时间复杂度与划分的趟数有关。</p><ul><li>理想的情况是，每次划分所选择的中间数恰好将当前序列几乎等分，经过$log_{2}n$趟划分，便可得到长度为1的子表。这样，整个算法的时间复杂度为$O(nlog_{2}n)$。</li><li>最坏的情况是，每次所选的中间数是当前序列中的最大或最小元素，这使得每次划分所得的子表中一个为空表，另一子表的长度为原表的长度-1。这样，长度为n的数据表的快速排序需要经过n趟划分，使得整个排序算法的时间复杂度为$O(n^2)$。</li></ul><h3 id="3-稳定性"><a href="#3-稳定性" class="headerlink" title="3. 稳定性"></a>3. 稳定性</h3><p>&emsp;&emsp;快速排序是一个高效但不稳定的排序，而且比较占内存，n越大占用的内存越大。</p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><p>&emsp;&emsp;快速排序有两种写法，常规写法和随机快排。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Quick</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"快速排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort10</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"1.0"</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">baseSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">baseSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token function">getBasePos</span><span class="token punctuation">(</span>arr <span class="token punctuation">,</span>low <span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">baseSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> base <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//基准位置左边</span>        <span class="token function">baseSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> base <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//基准位置右边</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getBasePos</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//第一个元素当做基准值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先从后面往前扫描，如果arr[high]大于等于基准值，high--(继续往前)，否则把arr[high]的值赋给arr[low]</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                high<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>low<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                low<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//然后再从前往后扫描，如果arr[low]的值小于等于基准值，low++，否则arr[low]的值赋给arr[high]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>high<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//循环结束基准值得位置就是low ，此时low == high</span>        arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> low<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意了</strong>这种写法越接近有序，速度越慢。栈内存分配不够的话，数据量大的情况很容易造成栈溢出</p><blockquote><p>快速排序的最坏情况基于每次划分对主元的选择。基本的快速排序选取第一个或者最后一个元素作为主元。这样在数组已经有序的情况下，每次划分将得到最坏的结果。一种比较常见的优化方法是随机化算法，即随机选取一个元素作为主元。这种情况下虽然最坏情况仍然是$O(n^2)$，但最坏情况不再依赖于输入数据，而是由于随机函数取值不佳。实际上，随机化快速排序得到理论最坏情况的可能性仅为$1/(2^n)$。所以随机化快速排序可以对于绝大多数输入数据达到$O(nlog_{2}n)$的期望时间复杂度。代码也很简单：</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">randowPos</span><span class="token punctuation">(</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>start <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">randow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getBasePos</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> <span class="token function">randowPos</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> prvot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先从后面往前扫描，如果arr[high]大于等于基准值，high--(继续往前)，否则把arr[high]的值赋给arr[low]</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">>=</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                high<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>low<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                low<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//然后再从前往后扫描，如果arr[low]的值小于等于基准值，low++，否则arr[low]的值赋给arr[high]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>high<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//循环结束基准值得位置就是low ，此时low == high</span>        arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> low<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-归并排序</title>
      <link href="/2017/08/20/java-ji-chu-gui-bing-pai-xu/"/>
      <url>/2017/08/20/java-ji-chu-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份鸡汤。很久没喝鸡汤了，来一碗。</p><blockquote><p>熬过了必须的苦，才能过上喜欢的生活。在一切变好之前，我们总要经历一些不开心的日子，这段日子也许很长，也许只是一觉醒来，所以耐心点，给好运一点时间。</p></blockquote></blockquote><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>&emsp;&emsp;<strong>归并排序</strong>（Merge Sort）是建立在归并操作上的一种有效的排序算法,该算法是采用<a href="https://baike.baidu.com/item/%E5%88%86%E6%B2%BB%E6%B3%95/2407337" target="_blank" rel="noopener">分治法（Divide and Conquer）</a>的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。<br>&emsp;&emsp;归并操作(merge)，也叫归并算法，指的是将两个顺序序列合并成一个顺序序列的方法。归并操作的工作原理如下：</p><ul><li>第一步：申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>第二步：设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>第三步：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针超出序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ul><p>举例说明，如设有数列{6，202，100，301，38，8，1}</p><ol><li>初始状态：6,202,100,301,38,8,1</li><li>第一次归并后：{6,202},{100,301},{8,38},{1}，比较次数：3；</li><li>第二次归并后：{6,100,202,301}，{1,8,38}，比较次数：4；</li><li>第三次归并后：{1,6,8,38,100,202,301},比较次数：4；</li><li>总的比较次数为：3 + 4 + 4 =11；逆序数为14；</li></ol><h3 id="2-算法分析"><a href="#2-算法分析" class="headerlink" title="2. 算法分析"></a>2. 算法分析</h3><p>&emsp;&emsp;和选择排序一样，归并排序的性能不受输入的影响，但表现比选择排序好的多，因为始终都是$O(nlog_{2}n)$，代表是需要额外的内存空间。</p><ul><li>时间复杂度：$O(nlog_{2}n)$</li><li>空间复杂度：$O(n)$，归并排序需要一个与原数组相同长度的数组做辅助来排序。</li></ul><h3 id="3-稳定性"><a href="#3-稳定性" class="headerlink" title="3. 稳定性"></a>3. 稳定性</h3><p>&emsp;&emsp;因为交换元素时，可以在相等的情况下做出不移动的限制，所以归并排序是可以稳定的；</p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><p>&emsp;&emsp;列一下常见的几种写法：</p><h4 id="4-1-写法一"><a href="#4-1-写法一" class="headerlink" title="4.1 写法一"></a>4.1 写法一</h4><blockquote><p>这种写法是我偶尔逛简书的时候看到的，所以更新上来。<a href="https://www.jianshu.com/p/33cffa1ce613" target="_blank" rel="noopener">传送门</a></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Merge</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"归并排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort10</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">breakUp</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">breakUp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">==</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">//拆分到数组元素为1</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>L <span class="token operator">+</span> R<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//二分</span>        <span class="token function">breakUp</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//拆分得到更小的左边</span>        <span class="token function">breakUp</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//拆分得到更小的右边</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//排序并且合并</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>R <span class="token operator">-</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p1 <span class="token operator">=</span> L<span class="token punctuation">;</span>        <span class="token keyword">int</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 比较左右两部分的元素，哪个小，把那个元素填入temp中</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>p2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 上面的循环退出后，把剩余的元素依次填入到temp中</span>        <span class="token comment" spellcheck="true">// 以下两个while只有一个会执行</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 把最终的排序的结果复制给原数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>L <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//合并排序后的数组</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>输出如下：<br>-——————————————–<br>归并排序v1.0 : [6, 5, 4, 3, 2, 1]<br>[5, 6, 4, 3, 2, 1]<br>[4, 5, 6, 3, 2, 1]<br>[4, 5, 6, 2, 3, 1]<br>[4, 5, 6, 1, 2, 3]<br>[1, 2, 3, 4, 5, 6]<br>排序结束<br>-——————————————–</p></blockquote><p>拆分流程和合并流程：(大概的流程，没有对着代码逻辑细分到每一步)</p><ol><li>(6,5,4),(3,2,1)</li><li>((6,5),(4),((3,2),(1))</li><li>(((6),(5)),(4)),(((3),(2)),(1)) 拆分完成</li><li>((5,6),(4)),(((3),(2)),(1)) 开始合并</li><li>(4,5,6),(((3),(2)),(1))</li><li>(4,5,6),((2,3),(1))</li><li>(4,5,6),(1,2,3)</li><li>(6,5,4,3,2,1) 合并完成</li></ol><p>看起来比较乱，注意 1 - 8 并不是代码执行顺序，我这里只是说明一下工作原理。</p><h4 id="4-2-写法二"><a href="#4-2-写法二" class="headerlink" title="4.2 写法二"></a>4.2 写法二</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort11</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.1"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">breakUp1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> p1 <span class="token operator">=</span> L<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> R<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment" spellcheck="true">//左边已经先结束</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>p2 <span class="token operator">-</span> L<span class="token punctuation">]</span><span class="token punctuation">;</span>                p2<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">></span> R<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//右边已经先结束</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>p1 <span class="token operator">-</span> L<span class="token punctuation">]</span><span class="token punctuation">;</span>                p1<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>p1 <span class="token operator">-</span> L<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">[</span>p2 <span class="token operator">-</span> L<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>p2 <span class="token operator">-</span> L<span class="token punctuation">]</span><span class="token punctuation">;</span>                p2<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>p1 <span class="token operator">-</span> L<span class="token punctuation">]</span><span class="token punctuation">;</span>                p1<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这种方式逻辑跟mergeSort2一致，就是写法上合并在一起了。</p><h4 id="4-3-写法三"><a href="#4-3-写法三" class="headerlink" title="4.3 写法三"></a>4.3 写法三</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort12</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.2"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token function">breakup2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">breakup2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> length <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">mergeSort2</span><span class="token punctuation">(</span><span class="token function">breakup2</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">breakup2</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> leftLength <span class="token operator">=</span> left<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> rightLength <span class="token operator">=</span> right<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> leftLength <span class="token operator">+</span> rightLength<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">>=</span> leftLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//这里要注意一下。sort11的mid等于leftLength - 1;</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左边的数组已经都排序完成，后面的挨个取右边的值</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">>=</span> rightLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">></span> right<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//等同于 &lt;= ，保证数值相同不会破坏源数据，保证稳定性</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这种写法，跟sort11区别在于，每次拆分是用两个临时数组去存储。拆分和合并的逻辑大体相同。</p><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>&emsp;&emsp;速度仅次于快速排序，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的数列。当数据量较大时，要注意考虑内存空间的开销。</p><blockquote><p>如果稳定性很重要而空间充足，归并排序是最好的选择。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-希尔排序</title>
      <link href="/2017/08/20/java-ji-chu-xi-er-pai-xu/"/>
      <url>/2017/08/20/java-ji-chu-xi-er-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>&emsp;&emsp;希尔排序(Shell Sort)是插入排序的一种又<code>缩小增量排序</code>（Diminishing Increment Sort），是直接插入排序算法的一种更高效的改进版本。希尔排序是<code>非稳定排序算法</code>。该方法因D.L.Shell于1959年提出而得名。希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>&emsp;&emsp;先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><ul><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1，($t_n = (t_{n-1}) / 2$）；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><blockquote><p>希尔排序也是插入排序的一种，它外层多了增量<code>gap</code>去控制外层循环。内层还是插入排序的核心思想。</p></blockquote><h3 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3. 算法分析"></a>3. 算法分析</h3><p>&emsp;&emsp;希尔排序的复杂度和增量序列是相关的，不同<code>gap</code>序列的设计对应不同的复杂度。</p><ul><li>{$1,2,4,8,…$}这种序列并不是很好的增量序列，使用这个增量序列的时间复杂度（最坏情形）是$O(n^2)$</li><li>Hibbard提出了另一个增量序列{$1,3,7，…,2^{k-1}$}，这种序列的时间复杂度(最坏情形)为$O(n^{1.5})$</li><li>Sedgewick提出了几种增量序列，其最坏情形运行时间为$O(n^{1.3})$,其中最好的一个序列是{$1,5,19,41,109…$}</li></ul><h3 id="4-稳定性"><a href="#4-稳定性" class="headerlink" title="4. 稳定性"></a>4. 稳定性</h3><p>&emsp;&emsp;虽然插入排序是稳定排序，但是希尔排序在插入的时候是跳跃性插入的，有可能破坏稳定性。所以希尔排序是一个不稳定的排序。</p><h3 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a>5. 代码实现</h3><p>&emsp;&emsp;学过直接插入排序的同学，写希尔排序应该很简单了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Shell</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"希尔排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort10</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">,</span> gap<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>gap <span class="token operator">=</span> length <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    j <span class="token operator">-=</span> gap<span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token function">printLoop</span><span class="token punctuation">(</span>i <span class="token operator">-</span> gap<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">"增量gap :"</span> <span class="token operator">+</span> gap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort11</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.1"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp<span class="token punctuation">,</span> gap <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gap <span class="token operator">=</span> gap <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    j <span class="token operator">-=</span> gap<span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token function">printLoop</span><span class="token punctuation">(</span>i <span class="token operator">-</span> gap<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">"增量gap :"</span> <span class="token operator">+</span> gap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>是不是很简单？我们来测试一下：</p><blockquote><p>-——————————————–<br>希尔排序v1.0 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [3, 5, 4, 6, 2, 1][增量gap :3]<br>第2轮排序后的数组为 : [3, 2, 4, 6, 5, 1][增量gap :3]<br>第3轮排序后的数组为 : [3, 2, 1, 6, 5, 4][增量gap :3]<br>第1轮排序后的数组为 : [2, 3, 1, 6, 5, 4][增量gap :1]<br>第2轮排序后的数组为 : [1, 2, 3, 6, 5, 4][增量gap :1]<br>第3轮排序后的数组为 : [1, 2, 3, 6, 5, 4][增量gap :1]<br>第4轮排序后的数组为 : [1, 2, 3, 5, 6, 4][增量gap :1]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6][增量gap :1]<br>排序结束，次数 : 9<br>-——————————————–<br>每次计算完增量后，后面的步骤就<code>直接插入排序</code>，只不过直接插入排序的增量是1而已</p></blockquote><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>&emsp;&emsp;相对于插入排序而言，比较较远距离的数据，使得数据移动跨过多个元素，进行一次比较可能会消除多个元素的交换。影响希尔排序速度的更大因素其实是增量因子，目前还没有给出最好的增量因子序列。</p><blockquote><p>对于中等大小的数据，希尔排序的运行时间是可以接受的。它的代码量不大，也不需要使用额外的内存空间。<strong>要注意的是它的不稳定性，如果对稳定性有要求那就不能选择希尔排序了。</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-插入排序</title>
      <link href="/2017/08/19/java-ji-chu-cha-ru-pai-xu/"/>
      <url>/2017/08/19/java-ji-chu-cha-ru-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>&emsp;&emsp;直接插入排序（Insertion sort）是一种简单直观且稳定的排序算法。基本思想：把待排序的记录按其关键码值的大小逐个插入到一个已经排好序的有序序列中，直到所有的记录插入完为止，得到一个新的有序序列。<strong>直接插入排序是插入排序的一种。</strong></p><table><thead><tr><th>平均时间复杂度</th><th>最好的时间复杂度</th><th>最坏的时间复杂度</th><th>空间复杂度</th><th>排序方法</th><th>稳定性</th></tr></thead><tbody><tr><td>$O_{(n^2)}$</td><td>$O_{(n)}$</td><td>$O_{(n^2)}$</td><td>$O_{(1)}$</td><td>内部排序(In-place)</td><td>稳定</td></tr></tbody></table><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>&emsp;&emsp;把 <code>n</code> 个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含 1 个元素，无序表中包含有 <code>n - 1</code> 个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复 <code>n - 1</code> 次可完成排序过程。</p><h3 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3. 算法分析"></a>3. 算法分析</h3><p>&emsp;&emsp;插入排序的平均时间复杂度是$O(n^2)$,最好情况是$O(n)$,最差情况是$O(n^2)$,是一种稳定的排序方法，空间复杂度是$O(1)$。<strong>大部分已排序好时较好使用。</strong></p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><blockquote><p>下面有部分方法在<a href="/2016/08/16/java-ji-chu-mou-pao-pai-xu/">冒泡排序</a>文章最后面可以找到。</p></blockquote><h4 id="4-1-教科书写法"><a href="#4-1-教科书写法" class="headerlink" title="4.1 教科书写法"></a>4.1 教科书写法</h4><ol><li>从前往后依次查找插入位置；</li><li>将插入位置之后i之前元素全部往后移一格；</li><li>插入指定元素。</li></ol><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 教科书写法     *     * @param arr     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort10</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//从下标1开始</span>            <span class="token comment" spellcheck="true">//在有序区间中为a[i]找插入位置（倒序查找），这种方法找出来的位置是 [j + 1]</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果j +1 == i，说明arr[i] 大于有序列表里面所有数据，应该插入末尾，其实就是arr[i]本身自己的位置。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//给a[i]腾地方</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">></span> j<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort11</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.1"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//从下标1开始</span>            <span class="token comment" spellcheck="true">//在有序区间中为arr[i]找插入位置（顺序查找），位置[j]</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果j == i，说明arr[i] 大于有序列表里面所有数据，应该插入末尾，其实就是arr[i]本身自己的位置。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//保存待插入元素</span>                <span class="token comment" spellcheck="true">// arr[j + 1] ~ arr[i - 1] 数据整体往右移一个下标</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token punctuation">;</span> k <span class="token operator">></span> j<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//把arr[i] 插入到计算好的位置 j</span>            <span class="token punctuation">}</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>同学们能看出两种方法有说明区别么？</p><blockquote><p>就是在查找待插入元素的位置的时候的一个是顺序一个是倒序的区别。<br>计算出来的 j 的值不一样。</p></blockquote></blockquote><h4 id="4-2-优化版本2-0"><a href="#4-2-优化版本2-0" class="headerlink" title="4.2 优化版本2.0"></a>4.2 优化版本2.0</h4><p>&emsp;&emsp;上面的这种方式第一次查找插入位置的时候需要将这些元素遍历一遍，移动的时候又得遍历一遍，进行了重复的运算，如果第一步寻找插入位置时，我们从后往前寻找插入位置的话，第一步和第二步就可以一起进行：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort20</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"2.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//无序列表第一个元素（待插入到有序列表中的元素）</span>            j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//有序列表最后一个元素</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据往后移动</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//插入到有序列表中，有序列表元素+1</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort21</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"2.1"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//无序列表第一个元素（待插入到有序列表中的元素）</span>            j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//有序列表最后一个元素</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据往后移动</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//插入到有序列表中，有序列表元素+1</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-3-优化版本3-0（二分法查找位置）"><a href="#4-3-优化版本3-0（二分法查找位置）" class="headerlink" title="4.3 优化版本3.0（二分法查找位置）"></a>4.3 优化版本3.0（二分法查找位置）</h4><p>&emsp;&emsp;可以看到，在寻找插入位置的时候，是一个一个进行比较的，这样的效率着实很低。所以可以将查找位置部分进行一下优化，不妨利用二分查找来找到待插入位置，然后再进行插入就好了。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 通过二分法思路查找元素item插入到有序列表arr的位置     * 比如 7 插入到 [ 1, 3, 5, 9, 10] return 3     *     * @param arr     * @param item     * @param low     * @param high     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">insertBinarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> item<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">&lt;=</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> item <span class="token operator">>=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">?</span> low <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> low<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">==</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//值相同，往后插入</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">insertBinarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">insertBinarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort30</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"3.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//无序列表第一个元素（待插入到有序列表中的元素）</span>            j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//有序列表最后一个元素</span>            k <span class="token operator">=</span> <span class="token function">insertBinarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据往后移动</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//插入到有序列表中，有序列表元素+1</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-4-哨兵版本"><a href="#4-4-哨兵版本" class="headerlink" title="4.4 哨兵版本"></a>4.4 哨兵版本</h4><p>&emsp;&emsp;网上有很多版本都提到了哨兵，但是很多人只是把代码贴上去，并没有讲到哨兵它不进行排序。哨兵的两个作用：</p><ol><li>临时缓存待插入的元素；</li><li>防止数组下标越界。（相对于普通写法就可以去掉 j &gt;= 0的判断，优化效率）</li></ol><blockquote><p>这种排序方式有个严重的弊端，arr[0]中不存储有用的元素，什么意思呢？</p><blockquote><p>[3, 2, 6, 7, 1, 9] (sort)==&gt; [9, 1, 2, 6, 7, 9]</p></blockquote><p>首位（哨兵位），它不会进行排序。</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort40</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//哨兵的作用之一，缓存待插入的元素</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>直接插入排序对小数据量或者基本有序时十分高效。</p><blockquote><p>适用于数据量不大，对算法的稳定性有要求，且数据局部或者整体有序的情况。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-选择排序</title>
      <link href="/2017/08/19/java-ji-chu-xuan-ze-pai-xu/"/>
      <url>/2017/08/19/java-ji-chu-xuan-ze-pai-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份鸡汤。经常要鼓励鼓励自己呀~</p><blockquote><p>宁可输给强大的敌人,不要输给失控的自己。</p></blockquote></blockquote><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>&emsp;&emsp;选择排序(Selection Sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<strong>简单选择排序属于选择排序的一种。</strong></p><table><thead><tr><th>平均时间复杂度</th><th>最好的时间复杂度</th><th>最坏的时间复杂度</th><th>空间复杂度</th><th>排序方法</th><th>稳定性</th></tr></thead><tbody><tr><td>$O_{(n^2)}$</td><td>$O_{(n^2)}$</td><td>$O_{(n^2)}$</td><td>$O_{(1)}$</td><td>内部排序(In-place)</td><td>不稳定</td></tr></tbody></table><h3 id="2-算法分析"><a href="#2-算法分析" class="headerlink" title="2. 算法分析"></a>2. 算法分析</h3><p>&emsp;&emsp;选择排序是<code>表现最稳定</code>的排序算法之一（<code>这是的稳定不是指算法的稳定性</code>）。因为无论什么数据进入时间复杂度都是$O_{(n^2)}$。所以用到它的时候，数据规模越小越好。所以最好的情况和最坏的情况时间复杂度都是一样的。时间复杂度为 $T_{(n)} = O_{(n^2)}$，空间复杂度 $S_{(n)} = O_{(1)}$。<strong>（去掉低阶项，去掉常数项，去掉高阶项的常参得到）</strong></p><h3 id="3-稳定性"><a href="#3-稳定性" class="headerlink" title="3. 稳定性"></a>3. 稳定性</h3><p>&emsp;&emsp;选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果一个元素比当前元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中两个5的相对前后顺序就被破坏了，所以选择排序是一个<code>不稳定的排序算法</code>。</p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a>4. 代码实现</h3><p>&emsp;&emsp;在大学里面刚接触<code>C语言</code>的时候在老师好那里学会了一种排序算法(<code>sort10(int[])</code>)，当时对冒泡和选择搞得不是很清楚，它俩很像。</p><blockquote><p>下面有部分方法在<a href="/2016/08/16/java-ji-chu-mou-pao-pai-xu/">冒泡排序</a>文章最后面可以找到。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Select</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"选择排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Select<span class="token punctuation">.</span><span class="token function">sort10</span><span class="token punctuation">(</span><span class="token function">resetArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Select<span class="token punctuation">.</span><span class="token function">sort11</span><span class="token punctuation">(</span><span class="token function">resetArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Select<span class="token punctuation">.</span><span class="token function">sort12</span><span class="token punctuation">(</span><span class="token function">resetArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort10</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort11</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.1"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> min<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort12</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.2"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//数据不需要交换</span>                <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">"i 就是最小值，不需要交换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> min<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>sort10</code> 方法用了<code>选择排序</code>的思想又跟<code>冒泡排序</code>很像。</li><li><code>sort11</code> 是最常规的<code>选择排序</code>的写法。</li><li><code>sort12</code> 是对<code>sort11</code>进行了优化，对内存循环获取的最小值和原值进行判断，如果相等说明i就是最小值，不需要交换。</li></ul><p>输出如下：</p><blockquote><p>-——————————————–<br>选择排序v1.0 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [1, 6, 5, 4, 3, 2]<br>第2轮排序后的数组为 : [1, 2, 6, 5, 4, 3]<br>第3轮排序后的数组为 : [1, 2, 3, 6, 5, 4]<br>第4轮排序后的数组为 : [1, 2, 3, 4, 6, 5]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>排序结束，次数 : 15<br>-——————————————–<br>-——————————————–<br>选择排序v1.1 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [1, 5, 4, 3, 2, 6]<br>第2轮排序后的数组为 : [1, 2, 4, 3, 5, 6]<br>第3轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>第4轮排序后的数组为 : [1, 2, 3, 0, 5, 6]<br>第5轮排序后的数组为 : [1, 2, 3, 0, 0, 6]<br>排序结束，次数 : 15<br>-——————————————–<br>-——————————————–<br>选择排序v1.2 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [1, 5, 4, 3, 2, 6]<br>第2轮排序后的数组为 : [1, 2, 4, 3, 5, 6]<br>第3轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>第4轮排序后的数组为 : [1, 2, 3, 4, 5, 6] [i 就是最小值，不需要交换]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6] [i 就是最小值，不需要交换]<br>排序结束，次数 : 15<br>-——————————————–</p></blockquote><h3 id="5-实践是检验真理的唯一标准"><a href="#5-实践是检验真理的唯一标准" class="headerlink" title="5. 实践是检验真理的唯一标准"></a>5. 实践是检验真理的唯一标准</h3><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>&emsp;&emsp;从三组测试结果来看，第三种方法是最高效的选择排序，当然上述测试数据只是在我的环境下的单一测试的结果。并不能代表宏观的测试结果。选择排序跟冒泡其实很像，相对于冒泡排序减少了交换的次数。</p><blockquote><p>当数据量不大，且对稳定性没有要求的时候，适用于选择排序。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-冒泡排序</title>
      <link href="/2017/08/16/java-ji-chu-mou-pao-pai-xu/"/>
      <url>/2017/08/16/java-ji-chu-mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份鸡汤，总喝毒鸡汤也不好。哈哈~</p><blockquote><p>没有人可以回到过去重新开始，但谁都可以从现在开始，书写一个全然不同的结局。</p></blockquote><p>🏃</p></blockquote><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>&emsp;&emsp;冒泡排序（Bubble Sort）：它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。这个算法的名字由来是因为越小（升序）的元素会经由交换慢慢”浮”到数列的顶端。<strong>冒泡排序是一种交换排序。</strong></p><table><thead><tr><th>平均时间复杂度</th><th>最好的时间复杂度</th><th>最坏的时间复杂度</th><th>空间复杂度</th><th>排序方法</th><th>稳定性</th></tr></thead><tbody><tr><td>$O_{(n^2)}$</td><td>$O_{(n)}$</td><td>$O_{(n^2)}$</td><td>$O_{(1)}$</td><td>内部排序(In-place)</td><td>稳定</td></tr></tbody></table><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><p>&emsp;&emsp;冒泡排序算法的原理如下：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="3-算法分析"><a href="#3-算法分析" class="headerlink" title="3.算法分析"></a>3.算法分析</h3><p>&emsp;&emsp;我们分析下最好的情况和最坏的情况。</p><h4 id="3-1-最好的情况-O-n"><a href="#3-1-最好的情况-O-n" class="headerlink" title="3.1 最好的情况 $O_{(n)}$"></a>3.1 最好的情况 $O_{(n)}$</h4><p>&emsp;&emsp;若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数 $C$ 和记录移动次数 $M$ 均达到最小值：$C_{min} = n - 1$ ，$M_{min} = 0$。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正序</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//sort方法具体实现在文章末尾</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><blockquote><p>-——————————————–<br>冒泡排序 : [1, 2, 3, 4, 5, 6]<br>第1轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>排序结束，次数 : 5<br>-——————————————–<br>$C_{min} = 5$ ，$M_{min} = 0$。 ( n 就是数组的长度 - 1)</p></blockquote><p>所以，冒泡排序最好的情况的时间复杂度为 $T_{(n)} = O_{(n)}$，空间复杂度 $S_{(n)} = O_{(1)}$。<strong>（去掉低阶项，去掉常数项，去掉高阶项的常参得到）</strong></p><h4 id="3-2-最坏的情况-O-n-2"><a href="#3-2-最坏的情况-O-n-2" class="headerlink" title="3.2 最坏的情况 $O_{(n^2)}$"></a>3.2 最坏的情况 $O_{(n^2)}$</h4><p>&emsp;&emsp;若初始文件是反序的，需要进行 $n-1$ 趟排序。每趟排序要进行 $n-1$ 次关键字的比较(1 ≤ i≤ n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值。</p><ul><li>比较次数：(n - 1) + (n - 2) + … + 1 = n(n - 1) / 2。  </li><li>移动次数：((n - 1) + (n - 2) + … + 1) x 3 = 3n(n - 1) / 2。</li></ul><p>所以，冒泡排序最坏的情况的时间复杂度为：$T_{(n)} = {\frac {3 {\times} n {\times} (n - 1)} {2}} = O(n^2)$，空间复杂度 $S_{(n)} = O_{(1)}$。<strong>（去掉低阶项，去掉常数项，去掉高阶项的常参得到）</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//倒序</span>        <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//sort方法具体实现在文章末尾</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><blockquote><p>-——————————————–<br>冒泡排序 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [5, 4, 3, 2, 1, 6]<br>第2轮排序后的数组为 : [4, 3, 2, 1, 5, 6]<br>第3轮排序后的数组为 : [3, 2, 1, 4, 5, 6]<br>第4轮排序后的数组为 : [2, 1, 3, 4, 5, 6]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>排序结束，次数 : 25<br>-——————————————–<br>$C_{max} = 25$ ，$M_{max} = 75$。</p></blockquote><h3 id="4-算法稳定性"><a href="#4-算法稳定性" class="headerlink" title="4. 算法稳定性"></a>4. 算法稳定性</h3><p>&emsp;&emsp;冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种 <code>稳定排序算法</code>。</p><h3 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a>5. 代码实现</h3><p>&emsp;&emsp;冒泡排序有很多种实现方法。下面我们来一一展示：</p><h4 id="5-1-基础写法1-0"><a href="#5-1-基础写法1-0" class="headerlink" title="5.1 基础写法1.0"></a>5.1 基础写法1.0</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"冒泡排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">sort10</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 冒泡排序，最基础的写法     *     * @param arr     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort10</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出:</p><blockquote><p>-——————————————–<br>冒泡排序v1.0 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [5, 4, 3, 2, 1, 6]<br>第2轮排序后的数组为 : [4, 3, 2, 1, 5, 6]<br>第3轮排序后的数组为 : [3, 2, 1, 4, 5, 6]<br>第4轮排序后的数组为 : [2, 1, 3, 4, 5, 6]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>第6轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>排序结束，次数 : 30<br>-——————————————–</p><blockquote><p>仔细观察第<code>5</code>和第<code>6</code>轮输出结果，有没有发现是一模一样的？因为倒数第二轮排序，它已经完成了判断和数据交换，所以，并不需要最后一次多余的排序流程。那么咱们就可以对外层循环的次数下手了。</p></blockquote></blockquote><h4 id="5-2-优化版本1-1"><a href="#5-2-优化版本1-1" class="headerlink" title="5.2  优化版本1.1"></a>5.2  优化版本1.1</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"冒泡排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sort10(arr);</span>        <span class="token function">sort11</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 冒泡排序     * 相比{@link #sort10(int[])} 少了一次外层循环。     *     * @param arr     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort11</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.1"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>好，我们再看输出结果：</p><blockquote><p>-——————————————–<br>冒泡排序v1.1 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [5, 4, 3, 2, 1, 6]<br>第2轮排序后的数组为 : [4, 3, 2, 1, 5, 6]<br>第3轮排序后的数组为 : [3, 2, 1, 4, 5, 6]<br>第4轮排序后的数组为 : [2, 1, 3, 4, 5, 6]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>排序结束，次数 : 25<br>-——————————————–</p><blockquote><p>从输出结果我们明显可以看到轮次少了一次，排序次数少了5次，但是并不会对结果有什么影响。是不是感觉很牛逼了，哈哈，自我吹嘘一下。那么我们还能不能再进行优化呢？答案肯定是能！必须能啊。从输出结果我们可以看出，每轮次结束后就会有一个数据排到后面来。</p><blockquote><p>i = 0 ==&gt; 最大数6排到了最后。<br>i = 1 ==&gt; 第二大数5排到了倒数第二位。<br>以此类推<br>…</p></blockquote><p>从上面的规律，我们是不是可以减少已经放到后面的数据的交换次数啊。</p></blockquote><p>👇</p></blockquote><h4 id="5-3-优化版本1-2"><a href="#5-3-优化版本1-2" class="headerlink" title="5.3 优化版本1.2"></a>5.3 优化版本1.2</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"冒泡排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// sort10(arr);</span>        <span class="token comment" spellcheck="true">// sort11()arr;</span>        <span class="token function">sort12</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 冒泡排序     * 对{@link #sort11(int[])}优化     * 每次内层循环会把最大的数排到最后，这样每次就可以减少交换次数i。     *     * @param arr     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort12</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.2"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><blockquote><p>-——————————————–<br>冒泡排序v1.2 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [5, 4, 3, 2, 1, 6]<br>第2轮排序后的数组为 : [4, 3, 2, 1, 5, 6]<br>第3轮排序后的数组为 : [3, 2, 1, 4, 5, 6]<br>第4轮排序后的数组为 : [2, 1, 3, 4, 5, 6]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>排序结束，次数 : 15<br>-——————————————–</p></blockquote><h4 id="5-4-终极版本1-3"><a href="#5-4-终极版本1-3" class="headerlink" title="5.4 终极版本1.3"></a>5.4 终极版本1.3</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"冒泡排序"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int[] arr = new int[]{1, 2, 0, 3, 5, 4};// 为了看效果</span>        <span class="token comment" spellcheck="true">// sort10(arr);</span>        <span class="token comment" spellcheck="true">// sort11()arr;</span>        <span class="token comment" spellcheck="true">// sort12(arr);</span>        <span class="token function">sort13</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 冒泡排序     * 对{@link #sort12(int[])}优化     * 加入交换标记变量，用于标记某一趟排序是否有数据交换。如果某一趟并没有进行数     * 据交换，说明所有数据已经有序了，可以立即结束。     *     * @param arr     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort13</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"1.3"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printLoop</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token string">"没有数据交换，终止后面无效的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printFooter</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>-——————————————–<br>冒泡排序v1.3 : [6, 5, 4, 3, 2, 1]<br>第1轮排序后的数组为 : [5, 4, 3, 2, 1, 6]<br>第2轮排序后的数组为 : [4, 3, 2, 1, 5, 6]<br>第3轮排序后的数组为 : [3, 2, 1, 4, 5, 6]<br>第4轮排序后的数组为 : [2, 1, 3, 4, 5, 6]<br>第5轮排序后的数组为 : [1, 2, 3, 4, 5, 6]<br>排序结束，次数 : 15<br>-——————————————–</p><blockquote><p>同学们看到这里就会说了，跟1.2没什么区别啊。那我们换一组源数据再来看看。</p></blockquote><p><code>int[] arr = new int[]{1, 2, 0, 3, 5, 4};</code></p><p>-——————————————–<br>冒泡排序v1.3 : [1, 2, 0, 3, 5, 4]<br>第1轮排序后的数组为 : [1, 0, 2, 3, 4, 5]<br>第2轮排序后的数组为 : [0, 1, 2, 3, 4, 5]<br>第3轮排序后的数组为 : [0, 1, 2, 3, 4, 5][没有数据交换，终止后面无效的操作]<br>排序结束，次数 : 12<br>-——————————————–</p><blockquote><p>看到没，同学们，当数据源越接近有序的情况，这种方法的优势越明显。</p><blockquote><p>第 <code>2</code> 轮 是交换后的结果，第 <code>3</code> 轮是检查是否有交换的情况。<br>所以这里的输出第 <code>2</code> 轮 和 第 <code>3</code> 轮一样，是没有问题的。</p></blockquote></blockquote></blockquote><p>好了，冒泡排序我们就介绍到这里啦。代码中部分方法我公布在下面：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LINE <span class="token operator">=</span> <span class="token string">"---------------------------------------------"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SORT_PRINT_HEADER <span class="token operator">=</span> <span class="token string">"%sv%s : "</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SORT_PRINT_LOOP <span class="token operator">=</span> <span class="token string">"第%d轮排序后的数组为 : "</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SORT_PRINT_FOOTER <span class="token operator">=</span> <span class="token string">"排序结束，次数 : %d"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SORT_PRINT_REMARK <span class="token operator">=</span> <span class="token string">"[%s]"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> LOG_ENABLE <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>LOG_ENABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printHeader</span><span class="token punctuation">(</span>String sortName<span class="token punctuation">,</span> String version<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LOG_ENABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SORT_PRINT_HEADER<span class="token punctuation">,</span> sortName<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printLoop</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LOG_ENABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SORT_PRINT_LOOP<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printLoop</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> String remark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LOG_ENABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SORT_PRINT_LOOP<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SORT_PRINT_REMARK<span class="token punctuation">,</span> remark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printFooter</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LOG_ENABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SORT_PRINT_FOOTER<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>       arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if (i == j) {   //用位运算的方式这里要注意一下。</span>        <span class="token comment" spellcheck="true">//     return;</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// arr[i] = arr[i] ^ arr[j];</span>        <span class="token comment" spellcheck="true">// arr[j] = arr[i] ^ arr[j];</span>        <span class="token comment" spellcheck="true">// arr[i] = arr[i] ^ arr[j];</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>眼尖的同学会发现数据交换里面用的是异或。对的，这里用的是<a href="/2017/08/12/java-ji-chu-wei-yun-suan/">位运算</a>的里面的异或的计算法则<code>a ^ b ^ b = a;</code></p></blockquote><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><blockquote><p>适用的情景为数据量量不大，对稳定性有要求，且数据基本有序的情况下。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-算法</title>
      <link href="/2017/08/13/java-ji-chu-suan-fa/"/>
      <url>/2017/08/13/java-ji-chu-suan-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份毒鸡汤。</p><blockquote><p>真正努力过的人，就会真正明白，天赋有多么重要。</p></blockquote><p>😎</p></blockquote><h3 id="1-什么是算法"><a href="#1-什么是算法" class="headerlink" title="1. 什么是算法"></a>1. 什么是算法</h3><p>&emsp;&emsp;算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。不同的算法可能用不同的时间、空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。定义来自<a href="https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025?fr=aladdin" target="_blank" rel="noopener">百度百科</a>。<br>&emsp;&emsp;定义比较很抽象很晦涩难懂。忘了在哪里看到一个很简单的描述：算法就是解决问题的方法和步骤。（功力不够深厚，没办法用文字完全解读算法的定义。）</p><h4 id="1-1-算法的特征"><a href="#1-1-算法的特征" class="headerlink" title="1.1 算法的特征"></a>1.1 算法的特征</h4><ul><li><strong>输入性</strong> ：有零个或多个输入，这些输入取自于某个特定的对象集合。</li><li><strong>输出性</strong> ：有一个或多个输出，这些输出是同输入有着某些特定关系的量。</li><li><strong>有穷性</strong> ：必须总是在执行到有穷步之后结束，且每一步都在有穷时间内完成。（每条指令执行次数是有限的，每条指令执行的时间也是有限的。）</li><li><strong>确定性</strong> ：每一条指令必须有确切的含义，不存在二义性。</li><li><strong>可行性</strong> ：算法中执行的任何计算步骤都是可以被分解为基本的可执行的操作步，即每个计算步都可以在有限时间内完成（也称之为 <strong>有效性</strong> ）。</li></ul><h4 id="1-2-算法的标准"><a href="#1-2-算法的标准" class="headerlink" title="1.2 算法的标准"></a>1.2 算法的标准</h4><ul><li><strong>正确性</strong> ：算法的正确性是评价一个算法优劣的最重要的标准。</li><li><strong>可读性</strong> ：算法的可读性是指一个算法可供人们阅读的容易程度。</li><li><strong>健壮性</strong> ：健壮性是指一个算法对不合理数据输入的反应能力和处理能力，也称为 <strong>容错性</strong> 。</li><li><strong>通用性</strong> ：算法具有一般性，即算的处理结果对于一般的数据结合都成立。</li></ul><h4 id="1-3-时间和空间复杂度"><a href="#1-3-时间和空间复杂度" class="headerlink" title="1.3 时间和空间复杂度"></a>1.3 时间和空间复杂度</h4><p>&emsp;emsp;同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。一个算法的评价主要从<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" target="_blank" rel="noopener">时间复杂度</a>和<a href="https://baike.baidu.com/item/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6" target="_blank" rel="noopener">空间复杂度</a>来考虑。</p><ul><li><strong>时间复杂度</strong> ：算法的时间复杂度是指执行算法所需要的计算工作量。一般来说，计算机算法是问题规模 <code>n</code> 的函数 <code>f(n)</code> ，算法的时间复杂度也因此记做。$$T(n)=Ο(f(n))$$因此，问题的规模 <code>n</code> 越大，算法执行的时间的增长率与 <code>f(n)</code> 的增长率正相关，称作渐进时间复杂度（<code>Asymptotic Time Complexity</code>）。</li><li><strong>空间复杂度</strong> ：算法的空间复杂度是指算法需要消耗的内存空间。其计算和表示方法与时间复杂度类似，一般都用复杂度的渐近性来表示。同时间复杂度相比，空间复杂度的分析要简单得多。</li></ul><blockquote><p>更多详细的定义。<a href="https://blog.csdn.net/yuxuan20062007/article/details/82095490" target="_blank" rel="noopener">算法分析：时间和空间复杂度</a></p></blockquote><h3 id="2-排序算法"><a href="#2-排序算法" class="headerlink" title="2. 排序算法"></a>2. 排序算法</h3><p>&emsp;&emsp;什么是排序？将无序的序列调整为有序的序列。在 <code>Java</code>中有十大经典的排序算法。分别是：</p><ol><li><a href="/2017/08/16/java-ji-chu-mou-pao-pai-xu/">冒泡排序</a></li><li><a href="/2017/08/19/java-ji-chu-xuan-ze-pai-xu/">选择排序</a></li><li><a href="/2017/08/19/java-ji-chu-cha-ru-pai-xu/">插入排序</a></li><li><a href="/2017/08/20/java-ji-chu-xi-er-pai-xu/">希尔排序</a></li><li><a href="/2017/08/20/java-ji-chu-gui-bing-pai-xu/">归并排序</a></li><li><a href="/2017/08/21/java-ji-chu-kuai-su-pai-xu/">快速排序</a></li><li><a href="2017/08/22/java-ji-chu-dui-pai-xu/">堆排序</a></li><li>计数排序</li><li>桶排序</li><li>基数排序</li></ol><p>网上有位大哥总结的很好。<a href="https://www.cnblogs.com/guoyaohua/p/8600214.html" target="_blank" rel="noopener">十大经典排序算法最强总结</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-位运算</title>
      <link href="/2017/08/12/java-ji-chu-wei-yun-suan/"/>
      <url>/2017/08/12/java-ji-chu-wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>一直想总结下位运算的知识点，拖延症太严重了。</strong><br>今日份毒鸡汤。</p><blockquote><p>你这么努力，忍受了那么多寂寞和痛苦，可也没见得你有多优秀啊。</p></blockquote><p>😝</p></blockquote><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>&emsp;&emsp;估计部分同学跟我一样，平时根本用不到位运算（都是在撸业务型的代码），但是在源码中又经常有他们的身影，看的云里雾里的。挺难受的，这次就好好复习复习基础知识。好了不啰嗦了，咱们进入正题吧。<br>&emsp;&emsp;在计算机底层所有数字都是以<code>二进制</code>形式存在的，<code>原码</code>是直接将一个数值换算成二进制数。但计算机以<code>补码</code>的形式保存所有的整数。计算规则：</p><ul><li>正数：<code>原码</code>、<code>补码</code>和<code>反码</code>完全相同；</li><li>负数：<code>反码</code>是对<code>原码</code>按位取反（<code>符号位</code>不变），补码是<code>反码</code>+1。</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00000001</span>                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00000001</span>                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00000001</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00000001</span>                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11111110 （原码的基础上按位取反，符号位不变）</span>                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11111111</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>0b11111111_11111111_11111111_11111111<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所有操作都是用补码去完成的。输出值为-1</span></code></pre><blockquote><p>最高位代表符号位 1位负数，0位正数。</p></blockquote><h3 id="2-位运算符"><a href="#2-位运算符" class="headerlink" title="2.位运算符"></a>2.位运算符</h3><p>&emsp;&emsp;<code>Java</code>支持的位运算符有7种。</p><table><thead><tr><th>运算符</th><th>中文名称</th><th>运算法则</th></tr></thead><tbody><tr><td>&amp;</td><td>与（且）</td><td>二进制按位操作，都为1才返回1。（都真才是真，见假就是假）</td></tr><tr><td>|</td><td>或</td><td>二进制按位操作，有1就返回1。（见真就是真，都假才是假）</td></tr><tr><td>~</td><td>非</td><td>二进制按位操作，取反。1为0，0为1。</td></tr><tr><td>^</td><td>异或</td><td>二进制按位操作，相同返回0，不同返回1。</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>整体右移，右边舍弃，左边（负数补1，正数补0）</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>整体右移，右边舍弃，左边补0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>整体左移，左边舍弃，右边补0</td></tr></tbody></table><h4 id="2-1-按位与（且）"><a href="#2-1-按位与（且）" class="headerlink" title="2.1 按位与（且）"></a>2.1 按位与（且）</h4><p>&emsp;&emsp;二进制按位操作，都为1才返回1。（都真才是真，见假就是假）。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00010000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00001001</span>                                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11110110</span>                                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11110111</span>    <span class="token comment" spellcheck="true">//补码操作按位与</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][-9]</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16 &amp; -9]</span>    <span class="token comment" spellcheck="true">//因为结果是正数（最高位为0）所以原码、反码和补码一致</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结果为16</span></code></pre><h4 id="2-2-按位或"><a href="#2-2-按位或" class="headerlink" title="2.2 按位或"></a>2.2 按位或</h4><p>&emsp;&emsp;二进制按位操作，有1就返回1。（见真就是真，都假才是假）</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00010000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00001001</span>                                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11110110</span>                                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11110111</span>    <span class="token comment" spellcheck="true">//补码操作按位或</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][-9]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][16 | -9]</span>    <span class="token comment" spellcheck="true">//因为结果是负数所以先求反码（补码-1）再求原码（反码除了最高位，其他按位取反）</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110110 [反码][16 | -9]</span>    <span class="token comment" spellcheck="true">//10000000 00000000 00000000 00001001 [原码][16 | -9 = -9]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结果为-9</span></code></pre><h4 id="2-3-按位非"><a href="#2-3-按位非" class="headerlink" title="2.3 按位非"></a>2.3 按位非</h4><p>&emsp;&emsp;二进制按位操作，取反。1为0，0为1。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00010000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00001001</span>                                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11110110</span>                                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11110111</span>    <span class="token comment" spellcheck="true">//补码操作按位非</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11101111 [补码][~16]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11101110 [反码][~16]</span>    <span class="token comment" spellcheck="true">//10000000 00000000 00000000 00010001 [原码][~16 = -17]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//结果为-17</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][-9]</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00001000 [补码][~-9]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span><span class="token operator">~</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果为8</span></code></pre><h4 id="2-4-按位异或"><a href="#2-4-按位异或" class="headerlink" title="2.4 按位异或"></a>2.4 按位异或</h4><p>&emsp;&emsp;进制按位操作，相同返回0，不同返回1。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00010000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00001001</span>                                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11110110</span>                                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11110111</span>    <span class="token comment" spellcheck="true">//补码操作按位异或</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][-9]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11100111 [补码][16 ^ -9]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11100110 [反码][16 ^ -9]</span>    <span class="token comment" spellcheck="true">//10000000 00000000 00000000 00011001 [原码][16 ^ -9 = 25]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结果为25</span></code></pre><h4 id="2-5-右移"><a href="#2-5-右移" class="headerlink" title="2.5 右移"></a>2.5 右移</h4><p>&emsp;&emsp;整体右移，右边舍弃，左边（负数补1，正数补0）</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00010000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00001001</span>                                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11110110</span>                                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11110111</span>    <span class="token comment" spellcheck="true">//补码操作按位右移 4</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16]</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00000001 [补码][16 >> 4]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结果为1</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][-9]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11111111 [补码][-9 >> 4]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11111110 [反码][-9 >> 4]</span>    <span class="token comment" spellcheck="true">//10000000 00000000 00000000 00000001 [原码][-9 >> 4 = -1]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span>b <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果为-1</span></code></pre><h4 id="2-6-无符号右移"><a href="#2-6-无符号右移" class="headerlink" title="2.6 无符号右移"></a>2.6 无符号右移</h4><p>&emsp;&emsp;整体右移，右边舍弃，左边补0。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00010000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00001001</span>                                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11110110</span>                                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11110111</span>    <span class="token comment" spellcheck="true">//补码操作按位无符号右移 4</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16]</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00000001 [补码][16 >>> 4]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结果为1</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][-9]</span>    <span class="token comment" spellcheck="true">//00001111 11111111 11111111 11111111 [补码][-9 >>> 4]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span>b <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果为2的27次方</span></code></pre><h4 id="2-7-左移"><a href="#2-7-左移" class="headerlink" title="2.7 左移"></a>2.7 左移</h4><p>&emsp;&emsp;整体左移，左边舍弃，右边补0。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//反码 00000000 00000000 00000000 00010000</span>                                    <span class="token comment" spellcheck="true">//补码 00000000 00000000 00000000 00010000</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//原码 10000000 00000000 00000000 00001001</span>                                    <span class="token comment" spellcheck="true">//反码 11111111 11111111 11111111 11110110</span>                                    <span class="token comment" spellcheck="true">//补码 11111111 11111111 11111111 11110111</span>    <span class="token comment" spellcheck="true">//补码操作按位左移 4</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000000 00010000 [补码][16]</span>    <span class="token comment" spellcheck="true">//00000000 00000000 00000001 00000000 [补码][16 &lt;&lt; 4]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//结果为2的8次方（左移几次就是乘以2的几次方）</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 11110111 [补码][-9]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 01110000 [补码][-9 &lt;&lt;&lt; 4]</span>    <span class="token comment" spellcheck="true">//11111111 11111111 11111111 01101111 [反码][-9 &lt;&lt;&lt; 4] </span>    <span class="token comment" spellcheck="true">//10000000 00000000 00000000 10010000 [原码][-9 &lt;&lt;&lt; 4 = -144]</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlin</span><span class="token punctuation">(</span>b <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果为-144</span></code></pre><h3 id="3-常见计算法则"><a href="#3-常见计算法则" class="headerlink" title="3. 常见计算法则"></a>3. 常见计算法则</h3><ul><li>任何数左移（右移）32的倍数位等于该数本身。 <code>a &gt;&gt; 32 = a ; b &lt;&lt; 32 = b;</code></li><li>在位移运算 <code>a &lt;&lt; b</code> 的计算中，若 <code>b</code> 为正数，则实际移动的位数为 <code>b % 32</code> ，若 <code>b</code> 为负数，则实际移动的位数为 <code>32 + b % 32</code> ；右移，同理。<code>a &lt;&lt; -1 等同 a &lt;&lt; 31;b &gt;&gt; -2 等同 b &gt;&gt; 30;</code></li><li>两次异或同一个值等于自己。<code>a ^ b ^ b = a;</code><ol><li>a ^ a = 0;</li><li>a ^ 0 = a;</li><li>a ^ b = b ^ a;</li><li>a ^ b ^ b = a;</li><li>a = b ^ c; 推导出 b = a ^ c;</li></ol></li><li>左移是乘以2的幂，对应着右移则是除以2的幂。</li></ul><h3 id="4-应用"><a href="#4-应用" class="headerlink" title="4. 应用"></a>4. 应用</h3><h4 id="4-1-判断奇偶数"><a href="#4-1-判断奇偶数" class="headerlink" title="4.1 判断奇偶数"></a>4.1 判断奇偶数</h4><p>&emsp;&emsp;二进制怎么判断一个数是奇数还是偶数？最低位是 <code>0</code>它就是偶数，否则就是奇数。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 判断是不是偶数     * 方法等同 a % 2     * @param number     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEvenNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>number <span class="token operator">&amp;</span> <span class="token number">0b01</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-2-简单加密解密"><a href="#4-2-简单加密解密" class="headerlink" title="4.2 简单加密解密"></a>4.2 简单加密解密</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> password <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//密码</span>    <span class="token keyword">int</span> privateKey <span class="token operator">=</span> <span class="token number">20190101</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//私钥</span>    <span class="token keyword">int</span> decodePwd <span class="token operator">=</span> password <span class="token operator">^</span> privateKey<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//加密后的密码</span>    <span class="token comment" spellcheck="true">//解密</span>    <span class="token keyword">int</span> encodePwd <span class="token operator">=</span> decodePwd <span class="token operator">^</span> privateKey<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解密后的密码</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encodePwd<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//123456</span></code></pre><h4 id="4-3-绝对值"><a href="#4-3-绝对值" class="headerlink" title="4.3 绝对值"></a>4.3 绝对值</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span>  <span class="token operator">~</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取符号位</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * {@link java.lang.Math}     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span>a <span class="token operator">:</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-4-两个数据之间的交换"><a href="#4-4-两个数据之间的交换" class="headerlink" title="4.4 两个数据之间的交换"></a>4.4 两个数据之间的交换</h4><p>&emsp;&emsp;通常情况下实现两个数据之间交换，都是定义一个临时变量 <code>temp</code>去实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;通过异或计算法则 <code>a ^ b ^ b = a;</code> 可以使用如下方式实现数据交换:</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//(a ^ b) ^ b = a(a的原值)</span>    a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// (a ^ b) ^ a = b(b已经经过一次赋值了，这个时候b的值就是a的原值)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1</span></code></pre><h4 id="4-5-权限或者状态的应用"><a href="#4-5-权限或者状态的应用" class="headerlink" title="4.5 权限或者状态的应用"></a>4.5 权限或者状态的应用</h4><p>&emsp;&emsp;通常情况下我们都是定义一堆的常量来管理权限或者状态。今天我们用一种更高级的写法来实现：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Permission</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PERMISSION_A <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//0001</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PERMISSION_B <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//0010</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PERMISSION_C <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//0100</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PERMISSION_D <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1000</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> permission<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 设置权限         * @param permission         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> permission<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>permission <span class="token operator">=</span> permission<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 获取当前权限         * @return         */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>permission<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 添加一个或多个权限         * @param permission         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> permission<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">contains</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>permission <span class="token operator">|=</span> permission<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 删除一个或多个权限         * @param permission         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> permission<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里有个陷阱，有些同学觉得可以直接this.permission ^= permission;</span>            <span class="token comment" spellcheck="true">//删除原先有的权限是没问题，但是当你删除原先没有的权限就会出问题啦。</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>permission <span class="token operator">&amp;=</span> <span class="token operator">~</span>permission<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * 判断是否含有某些权限         * @param permission         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> permission<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>permission <span class="token operator">&amp;</span> permission<span class="token punctuation">)</span> <span class="token operator">==</span> permission<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果需要判断权限不存在 (this.permission &amp; permission) == 0;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Permission permission <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Permission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            permission<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_D<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1000</span>            permission<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_B<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1010</span>            permission<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_A<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//false</span>            permission<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_D<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//true</span>            permission<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_B<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//1000</span>            permission<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_A<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//1000</span>            permission<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_C<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1100</span>            permission<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Permission<span class="token punctuation">.</span>PERMISSION_A <span class="token operator">|</span> Permission<span class="token punctuation">.</span>PERMISSION_B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1111</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>permission<span class="token punctuation">.</span><span class="token function">getPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//15</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>同学们思考下关于删除权限。</p><blockquote><p><code>this.permission = (this.permission &amp; permission) ^ this.permission;</code></p></blockquote><p>这样实现是否可行？</p></blockquote><h3 id="5-位运算算法题"><a href="#5-位运算算法题" class="headerlink" title="5. 位运算算法题"></a>5. 位运算算法题</h3><blockquote><p>有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？<a href="https://www.zhihu.com/question/19676641/answer/12613290" target="_blank" rel="noopener">来源:知乎.黄志聪</a></p></blockquote><p>&emsp;&emsp;刚看到这道题目的时候基本就是懵逼状态，算法不熟悉，位运算应用也差很多。网上很多大牛前辈都都给出了答案。<br>&emsp;&emsp;根据 <code>2^10 = 1024</code> ，所以 10个 老鼠可以确定 1000个 瓶子具体哪个瓶子有毒。具体实现跟 3个 老鼠确定 8个 瓶子原理一样。(意思就是3只老鼠确定8个瓶子中哪个瓶子有毒)<br>对每个瓶子进行编号0-7对每只老鼠编号1、2、3，然后列出每只老鼠去喝水的情况：(1代表喝，0代表不喝)</p><table><thead><tr><th>1号老鼠</th><th>2号老鼠</th><th>3号老鼠</th><th>瓶子编号</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td><td>2</td></tr><tr><td>0</td><td>1</td><td>1</td><td>3</td></tr><tr><td>1</td><td>0</td><td>0</td><td>4</td></tr><tr><td>1</td><td>0</td><td>1</td><td>5</td></tr><tr><td>1</td><td>1</td><td>0</td><td>6</td></tr><tr><td>1</td><td>1</td><td>1</td><td>7</td></tr></tbody></table><p>从上图得知：</p><ol><li>1号老鼠喝水编号4、5、6、7；</li><li>2号老鼠喝水编号2、3、6、7；</li><li>3号老鼠喝水编号1、3、5、6。</li></ol><p>假设1号老鼠没死，2号老鼠死了，3号老鼠也死了。那么瓶子编号就是3（<code>011</code>），根据老鼠死亡情况就可以换算出瓶子编号。</p><blockquote><p>哈哈，我也在努力充电中，大家一起加油哦~。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础-数据类型</title>
      <link href="/2017/08/11/java-ji-chu-shu-ju-lei-xing/"/>
      <url>/2017/08/11/java-ji-chu-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份毒鸡汤，希望您笑口常开。</p><blockquote><p>一直对发型和身材不满意的人，有一个共同点：不肯承认这是脸的问题。</p></blockquote><p>😋</p></blockquote><p><strong>&emsp;&emsp; <code>Java</code> 语言支持的类型分为两类：基本类型 <code>Primitive Type</code> 和引用类型 <code>Reference Type</code> 。</strong></p><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h3><p>&emsp;&emsp;基本类型包括 <code>boolean</code> 类型和数值类型。数值类型有整数类型和浮点类型。整数类型包括 <code>byte</code> 、 <code>short</code> 、 <code>char</code> 、 <code>int</code> 、 <code>long</code> ，浮点类型包括 <code>float</code> 和 <code>double</code> 。</p><blockquote><p>基本数据类型在被创建时，在栈上给其划分一块内存，将数值直接存储在栈上。</p></blockquote><h4 id="1-1-布尔型"><a href="#1-1-布尔型" class="headerlink" title="1.1 布尔型"></a>1.1 布尔型</h4><p>&emsp;&emsp;布尔型只有一个 <code>boolean</code> 类型，用于表示逻辑上的 <code>真</code> 或 <code>假</code> 。在 <code>Java</code> 语言中， <code>boolean</code> 类型的数值只能是 <code>true</code> 或 <code>false</code> ，不能使用0或者非0来代表。其他基本类型的值也不能转换成 <code>boolean</code> 类型。<strong>默认值 <code>false</code></strong>。</p><h4 id="1-2-字符型"><a href="#1-2-字符型" class="headerlink" title="1.2 字符型"></a>1.2 字符型</h4><p>&emsp;&emsp;字符型 <code>char</code> 通常用于表示单个的字符，值必须使用单引号 <code>&#39;&#39;</code> 括起来。 <code>Java</code> 语言使用 <code>16位</code> 的 <code>Unicode</code> 字符集作为编码方式，而 <code>Unicode</code> 被设计成支持世界上所有书面语言的字符，包括中文字符，因此 <code>Java</code> 程序支持各种语言的字符。<strong>默认值 <code>\u0000</code> ，整型值 0</strong> 。</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//默认值'\u0000'</span>    <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//区分char和整形的 0</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Main main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 输出Unicode的 0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>main<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>main<span class="token punctuation">.</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 48 (char的unicode='\u0030')</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;字符型的值有三种表现形式：</p><ul><li>直接通过单个字符来指定字符型值，例如 <code>&#39;A&#39;</code> 、 <code>&#39;B&#39;</code> 、 <code>&#39;a&#39;</code> 、<code>&#39;b&#39;</code> 和<code>&#39;9&#39;</code> 等；</li><li>通过转义字符表示特殊字符型值，例如 <code>&#39;\n&#39;</code> 和 <code>\t</code>等；</li><li>直接使用 <code>Unicode</code> 值来表示字符型值，格式 <code>&#39;\uXXXX&#39;</code> ，其中 <code>XXXX</code> 代表一个十六进制的整数。取值范围是 <code>\u0000</code> ~ <code>\uFFFF</code> (0 ~ 65535)，其中前256个字符  <code>\u0000</code> ~ <code>\u00FF</code> 字符和 <code>ASCII码</code> 中的字符完全重合。</li></ul><p>&emsp;&emsp; <code>Java</code> 语言中常用的转义字符如下：</p><table><thead><tr><th>转义字符</th><th>说明</th><th>Unicode表示方式</th></tr></thead><tbody><tr><td>\b</td><td>退格符</td><td>\u0008</td></tr><tr><td>\n</td><td>换行符</td><td>\u000a</td></tr><tr><td>\r</td><td>回车符</td><td>\u000d</td></tr><tr><td>\t</td><td>制表符</td><td>\u0009</td></tr><tr><td>\“</td><td>双引号</td><td>\u0022</td></tr><tr><td>&#39;</td><td>单引号</td><td>\u0027</td></tr><tr><td>\\</td><td>反斜线</td><td>\u005c</td></tr></tbody></table><blockquote><p><code>char</code> 代表字符型，实际上字符型也是一种整数类型，相当于无符号整数类型。<br><code>char</code> 类型的变量、值完全可以参与加、减、乘、除等数学运算，也可以比较大小。实际上都是用该字符对应的编码参与运算。</p></blockquote><h4 id="1-3-整型"><a href="#1-3-整型" class="headerlink" title="1.3 整型"></a>1.3 整型</h4><p>&emsp;&emsp;在 <code>Java</code> 语言中一般所说的整型，指的是 <code>byte</code> 、 <code>short</code> 、 <code>int</code> 、 <code>long</code>。</p><ul><li><code>byte</code> 在内存中占 <code>8</code> 位，表范围 <code>-128 ~ 127</code> ，<strong>默认值 0</strong>；</li><li><code>short</code> 在内存中占 <code>16</code> 位， 表范围 <code>-32768 ~ 32767</code> ，<strong>默认值 0</strong> ；</li><li><code>int</code> 在内存中占 <code>32</code> 位， 表范围 <code>-2147483648 ~ 2147483647</code> ，<strong>默认值 0</strong> ；</li><li><code>long</code> 在内存中占 <code>64</code> 位， 表范围 <code>-9223372036854775808 ~ 9223372036854775807</code> ，<strong>默认值 0L</strong> 。</li></ul><blockquote><p><code>int</code> 是最常用的整数类型，因此在通常情况假，直接给出一个整数值默认就是 <code>int</code>类型。<br><code>Java</code> 中整数值有4种表示方式：二进制（0b开头）、八进制（0开头）、十进制、十六进制（0x开头，其中10~15分别对应a~f）。注：不区分大小写。</p></blockquote><h3 id="1-4-浮点型"><a href="#1-4-浮点型" class="headerlink" title="1.4 浮点型"></a>1.4 浮点型</h3><p>关于浮点类型的二进制计算方法和精度的问题，可以看下这篇<a href="https://www.jianshu.com/p/c51041a791bd" target="_blank" rel="noopener">博客</a>。</p><h4 id="1-4-1-浮点数类型"><a href="#1-4-1-浮点数类型" class="headerlink" title="1.4.1 浮点数类型"></a>1.4.1 浮点数类型</h4><p>&emsp;&emsp;<code>Java</code> 的浮点类型有两种： <code>float</code> 和 <code>double</code> 。 <code>Java</code> 的浮点类型有固定的表数范围和字段长度，字段长度和表数范围与机器无关。<code>Java</code> 的浮点数遵循 <code>IEEE 754</code> 标准，才用二进制数据的科学计数法来表示浮点数。<br>&emsp;&emsp;<code>double</code> 类型代表双精度浮点数，占 <code>8</code> 个字节， <code>64</code> 位。<code>float</code> 代表单精度浮点数，占 <code>4</code> 个字节， <code>32</code> 位。</p><ul><li><code>float</code> 型数值，第 <code>1</code> 位是符号位，接下来 <code>8</code> 位表示指数，再接下来的 <code>23</code> 位表示尾数，<strong>默认值 0.0F</strong> ；</li><li><code>double</code> 型数值，第 <code>1</code> 位是符号位，接下来 <code>11</code> 位表示指数，再接下来的 <code>52</code> 位表示尾数，<strong>默认值 0.0D</strong> ；</li></ul><blockquote><p>因为 <code>Java</code> 浮点数使用二进制数据的科学计数法来表示浮点数，因此可能不能精确表示一个浮点数。例如把3.141595f值赋给一个 <code>float</code> 类型变量，接着输出这个变量时看到这个变量已经发生了改变。使用 <code>double</code> 类型的浮点数比 <code>float</code> 类型的浮点数更精确，但如果浮点数的精度足够高（小数点后的数字很多时），依然可能发生这种情况。如果开发者需要精确保存一个浮点数，可以使用 <code>BigDecimal</code> 类。</p></blockquote><h4 id="1-4-2-浮点数表现形式"><a href="#1-4-2-浮点数表现形式" class="headerlink" title="1.4.2 浮点数表现形式"></a>1.4.2 浮点数表现形式</h4><p>&emsp;&emsp;<code>Java</code> 语言的浮点数有两种表现形式：</p><ul><li>十进制数形式：这种形式就是简单的浮点数，例如 <code>5.12</code> 、<code>512.0</code> 、 <code>0.512</code> 。浮点数必须包含一个小数点，否则会被当做 <code>int</code> 类型处理；</li><li>科学计数法形式：例如 5.12e2（$5.12*10^2$）。</li></ul><blockquote><p><code>Java</code> 语言的浮点类型默认是 <code>double</code> 类型，如果希望 <code>Java</code> 把一个浮点类型值当做 <code>float</code> 类型处理，应该在这个浮点类型值后紧跟 <code>f</code> 或者 <code>F</code> 。</p></blockquote><h4 id="1-4-3-特殊的浮点数"><a href="#1-4-3-特殊的浮点数" class="headerlink" title="1.4.3 特殊的浮点数"></a>1.4.3 特殊的浮点数</h4><p>&emsp;&emsp;<code>Java</code> 还提供了三个特殊的浮点数值，用于表示溢出和出错。</p><ul><li>正无穷大：使用一个正数（浮点型）除以 0 得到正无穷大。 <code>Double</code> 或 <code>Float</code> 类型的 <code>POSITIVE_INFINITY</code> 就是正无穷大。所有正无穷大的值都是相等的。</li><li>负无穷大：使用一个负数（浮点型）除以 0 得到负无穷大。 <code>Double</code> 或 <code>Float</code> 类型的 <code>NEGATIVE_INFINITY</code> 就是负无穷大。所有负无穷大的值都是相等的。</li><li>非数：0.0 除以 0.0 或对一个负数开方得到一个非数。 <code>Double</code> 或 <code>Float</code> 类型的 <code>NaN</code> 就是非数。 <code>NaN</code>与任何数值都不相等，包括 <code>NaN</code>。</li></ul><blockquote><p>只有浮点数除以 0 才可以得到正无穷大或者负无穷大，因为 <code>Java</code>语言会自动把和浮点数运算的 0 （正数）当做 0.0（浮点数）处理。如果一个正数值除以 0 ，则会抛出异常 <code>ArithmeticException:/by zero</code></p></blockquote><h3 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="2. 引用类型"></a>2. 引用类型</h3><p>&emsp;&emsp;引用类型包括类(包含 <code>枚举</code> )、接口（包含注解 <code>@interface</code> ）、和数组类型。所谓引用类型就是对一个对象的引用，对象包括实例和数组两种。实际上，引用类型变量就是一个指针，只是 <code>Java</code> 语言不再使用这种说法。<code>Java</code> 为每种基本类型都提供了对应的封装类型，分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean。引用类型是一种对象类型,它的值是指向内存空间的引用，就是地址。例如：</p><pre class=" language-java"><code class="language-java">Class <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person persion <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"王大锤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在内存中的具体创建过程是：</p><ol><li>首先在 <code>栈内存</code> 中为 <code>persion</code> 分配一块空间；</li><li>在 <code>堆内存</code> 中为 <code>Person对象</code> 分配一块空间，并为其两个属性设初值 <code>name = null</code> ，<code>age = 0</code> ；</li><li>根据类Person中对属性的定义，为该对象的两个属性进行赋值操作；</li><li>调用构造方法，为两个属性赋值为 <code>name = &quot;王大锤&quot;</code> ，<code>age = 29</code> ；（注意这个时候 <code>person</code> 与 <code>Person对象</code> 之间还没有建立联系）</li><li>将 <code>Person对象</code> 在 <code>堆内存</code> 中的地址(long类型，十六进制0x)，赋值给 <code>栈内存</code> 中的 <code>person</code> ；通过引用（句柄）<code>person</code> 可以找到 <code>堆内存</code> 中对象的具体信息。</li></ol><blockquote><p>引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址。</p><blockquote><p>基本数据类型的变量是存储在栈内存中，而引用类型变量存储在栈内存中，保存的是实际对象在堆内存中的地址，实际对象中保存这内容。</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-分隔符、标识符和关键字</title>
      <link href="/2017/08/09/java-ji-chu-fen-ge-fu-biao-shi-fu-he-guan-jian-zi/"/>
      <url>/2017/08/09/java-ji-chu-fen-ge-fu-biao-shi-fu-he-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今日份毒鸡汤，希望您每天都开开心心。</p><blockquote><p>爱笑的人运气不会太差。说实话，如果一个人运不好，我不知道他怎么笑得出来。</p></blockquote><p>😁</p></blockquote><h2 id="1-分隔符"><a href="#1-分隔符" class="headerlink" title="1. 分隔符"></a>1. 分隔符</h2><p>&emsp;&emsp;<code>Java</code>语言也和其他编程语言一样，使用标识符作为变量、对象的名字，也提供了系列的关键字用以实现特别的功能。</p><h3 id="1-1-分号"><a href="#1-1-分号" class="headerlink" title="1.1 分号"></a>1.1 分号</h3><p>&emsp;&emsp;<code>Java</code>语言采用分号<code>;</code>作为语句的分割，因此每个<code>Java</code>语句必须使用分号结尾。</p><pre class=" language-java"><code class="language-java">String name1 <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须使用;作为每一个语句的结束</span>String name2 <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span></code></pre><h3 id="1-2-花括号"><a href="#1-2-花括号" class="headerlink" title="1.2 花括号"></a>1.2 花括号</h3><p>&emsp;&emsp;花括号<code>{}</code>的作用就是定义一个代码块，<code>{}</code>必须是成双成对。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法块</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-方括号"><a href="#1-3-方括号" class="headerlink" title="1.3 方括号"></a>1.3 方括号</h3><p>&emsp;&emsp;方括号<code>[]</code>的作用是用于访问数组元素，方括号通常紧跟数组变量名，而方括号里面放的是需要访问的数组元素的索引。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-4-圆括号"><a href="#1-4-圆括号" class="headerlink" title="1.4 圆括号"></a>1.4 圆括号</h3><ul><li>定义方法是用来包裹形参，调用方法是也是用来包裹传入的实参。</li><li>还可以用来强调一个整体，保证计算的优先级。</li><li>强制类型转换也需要用圆括号来包裹。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//方法块</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包裹入参的值 &amp; 强制转换类型</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算的顺序</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//包裹形参</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-5-空格"><a href="#1-5-空格" class="headerlink" title="1.5 空格"></a>1.5 空格</h3><p>&emsp;&emsp;<code>Java</code>语言使用空格分隔一条语句的不同部分。也可以用来合理缩进美化代码。</p><h3 id="1-6-圆点"><a href="#1-6-圆点" class="headerlink" title="1.6 圆点"></a>1.6 圆点</h3><p>&emsp;&emsp;通常用作类/对象和它的成员（包括成员变量、方法和内部类）之间的分隔符，表明调用某个类或者某个实例的指定成员。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> value2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>value1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类的变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例的公开变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getValue3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例的方法</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>等等    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h2><p>&emsp;&emsp;标识符就是用于给程序中的变量、类、方法命名的符号。规则如下：</p><ul><li>可以由字母、数字、下划线和美元符组成，不能使用数字开头</li><li>不能使用<a href="#java关键字">java关键字</a>，但是可以包含。</li><li>不能包含空格。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> methodCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span><span class="token keyword">int</span> method_count$<span class="token number">3</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span><span class="token keyword">int</span> 4method_count$ <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，不能使用数字开头</span>String <span class="token keyword">int</span> <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，不能使用java关键字</span>String intStr <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正确</span>String <span class="token keyword">int</span> strt <span class="token operator">=</span> <span class="token string">"int"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误，不能包含空格</span></code></pre><h2 id="3-java关键字（53个）"><a href="#3-java关键字（53个）" class="headerlink" title="3. java关键字（53个）"></a>3. java关键字（53个）</h2><p>&emsp;&emsp;<code>Java</code>语言中有一些具有特殊用途的单词被称为关键字（keywards）。其中有部分关键字是现在还未使用，但可能未来的<code>Java</code>版本中会使用，我们称之为保留字（reserved words）。</p><h3 id="3-1-问修饰符的关键字（3个）"><a href="#3-1-问修饰符的关键字（3个）" class="headerlink" title="3.1 问修饰符的关键字（3个）"></a>3.1 问修饰符的关键字（3个）</h3><p>用来修饰类、方法、变量。</p><table><thead><tr><th>&emsp;</th><th>类</th><th>本包</th><th>子类</th><th>外部包</th></tr></thead><tbody><tr><td>public</td><td>$\surd$</td><td>$\surd$</td><td>$\surd$</td><td>$\surd$</td></tr><tr><td>protected</td><td>$\surd$</td><td>$\surd$</td><td>$\surd$</td><td>$\times$</td></tr><tr><td>(默认)</td><td>$\surd$</td><td>$\surd$</td><td>$\times$</td><td>$\times$</td></tr><tr><td>private</td><td>$\surd$</td><td>$\times$</td><td>$\times$</td><td>$\times$</td></tr></tbody></table><h3 id="3-2-定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）"><a href="#3-2-定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）" class="headerlink" title="3.2 定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）"></a>3.2 定义类，接口，抽象类和实现接口，继承类的关键字，实例化对象（6个）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义类</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义接口</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义抽象类</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">B</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现接口</span><span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//继承类</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化对象</span></code></pre><h3 id="3-3-包的关键字（2个）"><a href="#3-3-包的关键字（2个）" class="headerlink" title="3.3 包的关键字（2个）"></a>3.3 包的关键字（2个）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义包的关键字</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>test2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入包的关键字</span></code></pre><h3 id="3-4-数据类型的关键字（10个）"><a href="#3-4-数据类型的关键字（10个）" class="headerlink" title="3.4 数据类型的关键字（10个）"></a>3.4 数据类型的关键字（10个）</h3><p>&emsp;&emsp;数据类型包含基本类型、枚举和空<code>void</code></p><h4 id="3-4-1-基本类型"><a href="#3-4-1-基本类型" class="headerlink" title="3.4.1 基本类型"></a>3.4.1 基本类型</h4><table><thead><tr><th>关键字</th><th>中文解释</th><th>位数</th><th>位数说明</th><th>取值范围</th><th>包装类型</th></tr></thead><tbody><tr><td>boolean</td><td>布尔</td><td></td><td></td><td></td><td>Boolean</td></tr><tr><td>byte</td><td>字节型</td><td>8bit</td><td>[符号位1bit][尾数7bit]</td><td>$-2^7\sim2^7-1$</td><td>Byte</td></tr><tr><td>char</td><td>字符型</td><td>16bit</td><td>无符号</td><td></td><td>Character</td></tr><tr><td>short</td><td>短整形</td><td>16bit</td><td>[符号位1bit][尾数15bit]</td><td>$-2^{15}\sim2^{15}-1$</td><td>Short</td></tr><tr><td>int</td><td>整形</td><td>32bit</td><td>[符号位1bit][尾数31bit]</td><td>$-2^{31}\sim2^{31}-1$</td><td>Integer</td></tr><tr><td>long</td><td>长整形</td><td>64bit</td><td>[符号位1bit][尾数63bit]</td><td>$-2^{63}\sim2^{63}-1$</td><td>Long</td></tr><tr><td>float</td><td>浮点型（单精度，精度是6位有效数字）</td><td>32bit</td><td>[符号位1bit][指数8bit][尾数23bit]</td><td></td><td>Float</td></tr><tr><td>double</td><td>双精度（精度是15位有效数字）</td><td>64bit</td><td>[符号位1bit][指数11bit][尾数52bit]</td><td></td><td>Double</td></tr></tbody></table><blockquote><p>关于boolean类型占多少个字节，官方给出的说明是其大小不是精确定义的[This data type represents one bit of information, but its “size” isn’t something that’s precisely defined.]<br><a href="https://blog.csdn.net/xiaheshun/article/details/79634232" target="_blank" rel="noopener">验证 boolean 所占的字节大小。</a></p></blockquote><h4 id="3-4-2-枚举enum"><a href="#3-4-2-枚举enum" class="headerlink" title="3.4.2 枚举enum"></a>3.4.2 枚举enum</h4><p>&emsp;&emsp;<code>enum</code> 枚举类型，可以将一组具名的值的有限集合创建为一种新的类型，而这些具名的值可以作为常规的程序组件使用。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//枚举</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Sex <span class="token punctuation">{</span>    male<span class="token punctuation">,</span> female<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-4-3-void空类型"><a href="#3-4-3-void空类型" class="headerlink" title="3.4.3 void空类型"></a>3.4.3 void空类型</h4><p>&emsp;&emsp;<code>void</code>表示空类型， <code>void</code> 可以用作方法的返回类型，以指示该方法不返回值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无返回值</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-条件循环（12个）"><a href="#3-5-条件循环（12个）" class="headerlink" title="3.5 条件循环（12个）"></a>3.5 条件循环（12个）</h3><h4 id="3-5-1-if-else"><a href="#3-5-1-if-else" class="headerlink" title="3.5.1 if else"></a>3.5.1 if else</h4><p>&emsp;&emsp;<code>if</code> 就是如果的意思，单独使用就是对括号 <code>()</code> 里面的条件进行判断，满足就执行 <code>{}</code> 里面的代码块。也可以搭配 <code>else</code> 使用，假如不满足 <code>if</code>的条件就执行 <code>else</code> 里面的代码块。多条件的话还可以搭配 <code>else if</code> 进行逻辑判断。不啰嗦太多，直接上代码比较直观一点：</p><blockquote><p>条件计算的结果为布尔值哦。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//单一条件判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果condition为true就会进入代码块执行下面代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//互斥的两种情况判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果condition为true就会进入代码块执行下面代码，否则执行else里面的代码</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//多条件判断</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-2-do-while"><a href="#3-5-2-do-while" class="headerlink" title="3.5.2 do while"></a>3.5.2 do while</h4><p>&emsp;&emsp;<code>do</code> 一般搭配 <code>while</code> 使用，在判断 <code>while</code>的condition之前一定会执行一次。<br><code>while</code>也可以单独使用，用来循环指定的逻辑。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//condition为ture，一直循环执行代码块</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无论condition是否为true一定会先执行一次。</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-5-3-for-break-continue"><a href="#3-5-3-for-break-continue" class="headerlink" title="3.5.3 for break continue"></a>3.5.3 for break continue</h4><p>&emsp;&emsp; <code>for</code> 也可以用来作为循环的语句。它跟 <code>while</code> 在写法上有点区别，for 语句的形式为 <code>for(initialize; condition; increment)</code> 控件流进入 <code>for</code> 语句时，将执行一次 <code>initialize</code> 语句。每次执行循环体之前将计算 <code>condition</code> 的结果。如果 <code>condition</code> 为 <code>true</code>，则执行循环体。 每次执行循环体之后，在计算下一个迭代的 <code>condition</code> 之前，将执行 <code>increment</code> 语句。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：<span class="token number">1</span><span class="token number">3</span><span class="token number">5</span></code></pre><p>&emsp;&emsp;有些同学就会问了，那我的 <code>condition</code> 如果一直为 <code>true</code> ，或者说我不想等到所有情况都执行一次中途退出循环该怎么办？这就可以使用我们的关键字 <code>break</code> ，包括在<a href="#">3.5.2</a>中的<code>while</code>循环也是可以使用 <code>break</code> 跳出本次循环。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：<span class="token number">1</span></code></pre><p>&emsp;&emsp;<code>continue</code> 用来当我满足某个条件后，我不想再执行下面的代码块，而直接进入下一次循环。在 <code>while</code> 循环也是可以使用哦。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：<span class="token number">1</span><span class="token number">5</span></code></pre><h4 id="3-5-4-return-instanceof"><a href="#3-5-4-return-instanceof" class="headerlink" title="3.5.4 return instanceof"></a>3.5.4 return instanceof</h4><ul><li><code>return</code> 会导致方法返回到调用它的方法，从而传递与返回方法的返回类型匹配的值。如果方法具有非 <code>void</code> 的返回类型，<code>return</code> 语句必须具有相同或兼容类型的参数。 返回值两侧的括号是可选的。</li><li><code>instanceof</code> 用来确定对象所属的类。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isString</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//o 不为空 并且 左边的对象是右边对象的实例</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-5-5-switch-case-default"><a href="#3-5-5-switch-case-default" class="headerlink" title="3.5.5 switch case default"></a>3.5.5 switch case default</h4><p>&emsp;&emsp; <code>switch case</code>也是用来条件判断的语句。<code>case</code>作为<code>switch</code>的条件分支，一般以 <code>break</code> 或者 <code>retrurn</code> 用于退出 switch 语句，如果没有结束语句，则执行流将进入所有后面的 <code>case</code> 和/或 <code>default</code> 块。</p><blockquote><p><code>swtich</code> 中的 <code>condition</code> 必须是 <code>byte、char、short or int</code>类型</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> color<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            color <span class="token operator">=</span> Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            color <span class="token operator">=</span> Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//当index不满足任何一个case的情况下就会执行default</span>            color <span class="token operator">=</span> Color<span class="token punctuation">.</span>RED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> color<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-6-修饰方法，类，属性和变量（9个）"><a href="#3-6-修饰方法，类，属性和变量（9个）" class="headerlink" title="3.6 修饰方法，类，属性和变量（9个）"></a>3.6 修饰方法，类，属性和变量（9个）</h3><ul><li><code>static</code> 属性和方法都可以用 <code>static</code> 修饰，直接使用类名.属性和方法名。 只有内部类可以使用 <code>static</code> 关键字修饰，调用直接使用类名.内部类类名进行调用。 <code>static</code> 可以独立存在静态块。</li><li><code>final</code> 方法和类都可以用 <code>final</code> 来修饰 <code>final</code> 修饰的类是不能被继承的 修饰的方法是不能被子类重写。常量的定义： <code>final</code> 修饰的属性就是常量。</li><li><code>super</code> 用来调用父类的方法。</li><li><code>this</code> 用于引用当前实例。当引用可能不明确时，可以使用 <code>this</code> 关键字来引用当前的实例。</li><li><code>native</code> 以指示该方法是用 <code>Java</code> 以外的语言实现的。 <code>Java</code> 的不足除了体现在运行速度上要比传统的 <code>C++</code> 慢许多之外， <code>Java</code> 无法直接访问到操作系统底层（如系统硬件等)，为此 <code>Java</code> 使用native方法来扩展 <code>Java</code> 程序的功能。</li><li><code>strictfp</code> 的意思是<code>FP-strict</code>，也就是说精确浮点的意思。在<code>Java</code>虚拟机进行浮点运算时，如果没有指定 <code>strictfp</code> 关键字时，Java的编译器以及运行环境在对浮点运算的表达式是采取一种近似于我行我素的行为来完成这些操作，以致于得到的结果往往无法令人满意。而一旦使用了 <code>strictfp</code> 来声明一个类、接口或者方法时，那么所声明的范围内 <code>Java</code> 的编译器以及运行环境会完全依照浮点规范 <code>IEEE-754</code> 来执行。因此如果想让浮点运算更加精确，而且不会因为不同的硬件平台所执行的结果不一致的话，那就请用关键字 <code>strictfp</code> 。可以将一个类、接口以及方法声明为 <code>strictfp</code> ，但是不允许对接口中的方法以及构造函数声明 <code>strictfp</code> 关键字。</li><li><code>synchronized</code> 可以应用于方法或语句块，并为一次只应由一个线程执行的关键代码段提供保护。 可防止代码的关键代码段一次被多个线程执行。 </li><li><code>transient</code> 可以应用于类的成员变量，以便指出该成员变量不应在包含它的类实例已序列化时被序列化。</li><li><code>volatile</code> 用于表示可以被多个线程异步修改的成员变量。 注意： <code>volatile</code> 关键字在许多 <code>Java</code> 虚拟机中都没有实现。 <code>volatile</code> 的目标用途是为了确保所有线程所看到的指定变量的值都是相同的。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//volatile具有synchronized关键字的“可见性”，但是没有synchronized关键字的“并发正确性”，也就是说不保证线程执行的有序性。</span>                                      <span class="token comment" spellcheck="true">//也就是说，volatile变量对于每次使用，线程都能得到当前volatile变量的最新值。但是volatile变量并不保证并发的正确性。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//代表常量</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//A不能被继承</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span><span class="token function">loadlibrary</span><span class="token punctuation">(</span><span class="token string">"lib-gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修饰的成员变量不被序列化</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>String params<span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用父类方法</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法块加上同步锁，线程安全</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">showGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//本地静态方法</span><span class="token punctuation">}</span></code></pre><h3 id="3-7-错误处理（5个）"><a href="#3-7-错误处理（5个）" class="headerlink" title="3.7 错误处理（5个）"></a>3.7 错误处理（5个）</h3><ul><li><code>try</code> 捕捉异常</li><li><code>catch</code> 处理异常</li><li><code>finally</code> 有无异常都执行</li><li><code>throw</code> 抛出一个异常</li><li><code>throws</code> 声明一个异常可能被抛出，把异常交给他的上级管理，自己不进行异常处理</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do something</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>“error”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-8-直接量（literal）（3个）"><a href="#3-8-直接量（literal）（3个）" class="headerlink" title="3.8 直接量（literal）（3个）"></a>3.8 直接量（literal）（3个）</h3><ol><li><code>null</code> 表示无值，空值。将 <code>null</code> 赋给非原始变量相当于释放该变量先前所引用的对象。不能将 <code>null</code> 赋给基本类型。</li><li><code>true</code>表示 <code>boolean</code> 变量的两个合法值中的一个，真。</li><li><code>false</code>表示 <code>boolean</code> 变量的两个合法值中的一个，假。</li></ol><h3 id="3-9-断言（1个）"><a href="#3-9-断言（1个）" class="headerlink" title="3.9 断言（1个）"></a>3.9 断言（1个）</h3><p>&emsp;&emsp; <code>assert</code>如果为 <code>true</code> ，则程序继续执行，如果为 <code>false</code> ，则程序抛出 <code>AssertionError</code> 并终止运行</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span> s <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//断言</span></code></pre><h3 id="3-10-保留字（2个）"><a href="#3-10-保留字（2个）" class="headerlink" title="3.10 保留字（2个）"></a>3.10 保留字（2个）</h3><p>&emsp;&emsp; <code>goto</code>和<code>const</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/08/01/hello-world/"/>
      <url>/2017/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
